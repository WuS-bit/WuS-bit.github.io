{"meta":{"title":"WuS-bit","subtitle":"","description":"","author":"Wu Shang","url":"http://WuS-bit.github.io","root":"/"},"pages":[{"title":"关于","date":"2020-04-16T03:40:34.000Z","updated":"2020-04-16T03:45:19.995Z","comments":true,"path":"about/index.html","permalink":"http://wus-bit.github.io/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-04-14T14:13:11.000Z","updated":"2020-04-16T01:45:40.907Z","comments":true,"path":"categories/index.html","permalink":"http://wus-bit.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-04-14T14:05:30.000Z","updated":"2020-04-16T01:47:25.333Z","comments":true,"path":"tags/index.html","permalink":"http://wus-bit.github.io/tags/index.html","excerpt":"","text":""},{"title":"海内存知己","date":"2020-04-15T14:18:11.000Z","updated":"2020-04-16T02:50:57.224Z","comments":true,"path":"friends/index.html","permalink":"http://wus-bit.github.io/friends/index.html","excerpt":"","text":"欢迎留言交换友链:我的博客信息： 名称：WuS-bit头像：https://tva1.sinaimg.cn/large/007S8ZIlly1gdve5b27cyj30qn0qnwfy.jpg地址：https://wus-bit.github.io标签：[java, 数据科学]"}],"posts":[{"title":"事务-系统恢复-并发控制","slug":"事务-系统恢复-并发控制","date":"2020-04-27T07:22:42.000Z","updated":"2020-04-27T07:27:52.307Z","comments":true,"path":"事务-系统恢复-并发控制/","link":"","permalink":"http://wus-bit.github.io/%E4%BA%8B%E5%8A%A1-%E7%B3%BB%E7%BB%9F%E6%81%A2%E5%A4%8D-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/","excerpt":"本文用以记录数据库概念专业课学习过程中事务，系统恢复，并发控制章节中的重要概念（更新中……）","text":"本文用以记录数据库概念专业课学习过程中事务，系统恢复，并发控制章节中的重要概念（更新中……） 事务一、事物的概念： 事务是构成单一逻辑工作单元的操作的集合。比如：将钱从一个账户转到另一个帐户就是一个事务，该事务包括分别对两个庄户的更新操作。 二、事务的特性（ACID） 原子性(Atomicity)：事务是不可分的。事务的所有动作要么全部执行，要么由于出错而撤销事务的影响。 一致性(consistency)：事务产生的结果只能使数据库从一个状态转移到另一状态且保持一致。即当事务成功提交时，保存一致性结果。而当事务尚未完成就中断时，应回滚事务部分操作对数据库的影响。 隔离性(isolation)：事务的隔离性是指一个事务的执行不能影响到另一个事务，即一个事务的内部操作相对于外部事务是隔离的。 持久性(durability)：一个事务成功完成后，他对数据库的修改必须是永久的，即使出现系统故障。 三、事务的状态 活跃的(active)：初始状态，事务执行过程中处于这个状态。 部分提交(partially committed)：事务的最后一条语句执行后。此时，事务中对数据的操作已经全部完成，但结果数据还驻留在内存中。因此，如果在此状态时，系统出现故障仍可能使事务不得不终止 失败的(failed)：如果事务不能正常执行，事务就进入失败状态。这意味着事务没有成功地完成，必须回滚。回滚（Rollback）就是撤消事务已经做出任何数据更改。一旦事务造成的所有更改被撤消，我们就说事务已回滚。 中止的(aborted)：事务回滚并且数据库已经恢复到事务执行前的状态。 提交状态(committed)： 事务成功完成后。向日志记录中写入一条事务日志信息，并将事务对数据的更改完全写入磁盘时，标志着事务成功完成，这时事务就进入了提交状态。事务成功执行之后，更新结果转存到永久存储器上，因此，事务一旦提交，即使出现了故障，事务所做的数据更新也能在系统重新启动后恢复。123456graph LRA(活跃状态) --&gt;B(部分提交状态)A(活跃状态) --&gt;C(失败状态)B(部分提交状态) --&gt;C(失败状态)B(部分提交状态) --&gt;D(提交状态)C(失败状态) --&gt;E(中止状态) 恢复系统四、故障分类 事务故障：有两种错误可能造成事务执行失败。 逻辑错误：事务由于内部条件而无法正常执行。如非法输入，超出资源等。如在转账事务中需要将一笔金额由一个账户转入另一个账户，但在操作过程中发现余额不够，不能转出。这种情况可由应用程序安排一个ROLLBACK中止事务的执行。该类错误由程序自身解决。 系统错误：系统进入一种不良状态（如死锁），事务无法继续执行。由系统处理。 系统崩溃：系统故障是指造成系统停止运行的任何事件，如硬件故障、操作系统或DBMS故障、突然停电等。这些情况发生时，正在执行着的所有事务将突然中断，导致内存中保留的事务数据都被丢失，数据可能处在不一致的状态。 磁盘故障：存储设备故障主要指辅助存储的介质受到破坏，如磁盘的磁头碰撞使部分磁介质损坏等。这类故障不但影响活动着的所有事务，而且使被损坏介质的数据丢失，数据库遭到严重破坏。 五、数据库恢复技术 基本原理：建冗余数据，即利用存储在系统其他地方（与数据分离）的冗余数据来实现恢复。 建立冗余数据的常用技术： 数据转储 记录日志文件 数据转储：DBA定期地将整个数据库复制到磁带或另一个磁盘上作为备份保存。 转储方式： 静态转储与动态转储 海量转储与增量转储 基于日志的数据库恢复：在修改数据库本身之前，首先向稳定存储器中输入修改描述信息，再执行修改操作，以确保已提交事务的修改能永久存储，中止的事务可回滚。日志记录技术要保证先写日志，再修改数据 日志记录的基本格式： 事务标识(Ti)：执行写操作事务的唯一标识 数据项标识(Xj)：所写数据项的唯一标识。通常是数据项在磁盘上的位置，包括数据项所驻留的块的块标识及块内偏移量。 旧值(V1)：数据项的写前值。 新值(V2)：数据项的写后值。一般表示未&lt;Ti, Xj, V1, V2&gt;。&lt;Ti start&gt; 事务Ti开始。&lt;Ti commit&gt; 事务Ti提交，表示事务对数据库的所有修改已提交到缓冲区，不能确定是否更新了磁盘。&lt;Ti abort&gt; 事务Ti中止。 基于日志的恢复技术： redo：对于已提交的写操作，当系统发生故障崩溃时，用redo重做事务，恢复已完成的事务。 undo：对于修改了数据库但未提交的事务，利用undo撤销事务的影响。 六、检查点恢复技术 检查点的引入：为减少日志记录的搜索规模并减少重复的redo操作，引入检查点技术，即在日志文件中加一个表示数据库是否正常运行的标识。检查点写入时保证（1）此时不允许有任何更新操作（2）将所有更新过的缓冲块写入磁盘(保证检查点之前已提交的事务已写入磁盘，中止事务已回滚) 写入检查点： 检查点记录内容： 建立检查点时刻所有正在执行的事务清单（以&lt;Ti commit&gt;, &lt;Ti abort&gt;作为执行完成标识） 这些事务最近一个日志记录的地址 检查点的执行过程： 将当前位于主存的所有日志记录输出到稳定存储器。 将所有修改操作结果的缓冲块写入磁盘 将一个日志记录写入稳定存储器，L是建立检查点时刻所有正在执行的事务清单 将检查点记录在日志文件中的地址写入重启动文件。 利用价差点的恢复步骤： 在重启动文件中找到最后一个检查点记录 将检查点时刻事务清单中的事务暂时 放到undo队列。 从检查点开始正向扫描日志文件， 若有新开始的事务，暂时放入Undo队列。 若有提交事务Tj，把Tj从Undo队列移到redo队列 反向扫描日志文件对undo队列中的事务进行undo 再次正向扫描，对redo 队列中的事务进行redo 七、数据库的镜像恢复技术（涉及负载均衡，主从复制等后期补充） 概念：为预防介质故障，DBA周期性地转储数据库。 使用： 出现介质故障： 可由镜像磁盘继续提供使用 同时DBMS自动利用镜像磁盘数据进行数据库恢复 未出现故障时 主从复制、读写分离：对于并发操作，一个用户对数据库加排他锁，其他用户可对镜像进行读取操作，提高并发性 负载均衡 .","categories":[{"name":"数据库课程","slug":"数据库课程","permalink":"http://wus-bit.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BE%E7%A8%8B/"},{"name":"事务、恢复系统、并发控制","slug":"数据库课程/事务、恢复系统、并发控制","permalink":"http://wus-bit.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BE%E7%A8%8B/%E4%BA%8B%E5%8A%A1%E3%80%81%E6%81%A2%E5%A4%8D%E7%B3%BB%E7%BB%9F%E3%80%81%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"}],"tags":[{"name":"数据库课程学习","slug":"数据库课程学习","permalink":"http://wus-bit.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}]},{"title":"explain关键字","slug":"explain关键字","date":"2020-04-20T08:41:57.000Z","updated":"2020-04-20T14:41:02.731Z","comments":true,"path":"explain关键字/","link":"","permalink":"http://wus-bit.github.io/explain%E5%85%B3%E9%94%AE%E5%AD%97/","excerpt":"概要在MySQL中，可以使用explain关键字来获取模拟优化器执行SQL语句的结果，从而知道MySQL是如何执行查询语句的，进而分析查询语句或是表结构的性能瓶颈，方便进行性能优化。","text":"概要在MySQL中，可以使用explain关键字来获取模拟优化器执行SQL语句的结果，从而知道MySQL是如何执行查询语句的，进而分析查询语句或是表结构的性能瓶颈，方便进行性能优化。 Explain关键字语法： explain + SQL；先上一个demo，留下印象： Explain中的列一、id列总是一组数字，是select查询的序列号，用来标识查询中执行select子句或操作表的顺序。 情况分析 id相同时，从上到下顺序执行操作表（mysql的查询计划是左深树） id不同时，id值越大越先执行 当查询语句不含子查询或联合(Union)时id总为1 当出现子查询时，id会增大 二、select_type表示查询类型 SIMPLE:简单的select查询，查询中不包括子查询或union PRIMARY:查询中包括任何复杂的子部分，最外层查询被标记为primary SUBQUERY:在select或where子句中的子查询 DERIVED:from子句中的子查询被标记为derived(衍生)，MySQL会递归地执行这些子查询，结果放在临时表 UNION：出现在UNION后的那个select查询会被标记为UNION UNION RESULT:从UNION表获取结果的select 三、table表示该查询是关于的那张表 四、type显示查询使用了哪种类型(访问类型) 常见访问类型效率从最好到最差：system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all一般来说，查询至少到range级别，最好达到ref system：表中只有一行记录。 const: 通常是以primary key 或 unique索引作为where子句，且比较条件是键可取值中 的一个常量，通过一次索引便可找到。例如：select * from st where id = 1; eq_ref: 这种访问类型，MySQL知道最多只返回一条符合条件的记录。也是以主键或唯一性索引查找，但比较条件不是常量（另一表中的参考值）。 ref: 用非唯一性索引查找，返回匹配某单个值的所有行。是查找和扫描的混合体。 range: 范围扫描，即一个限制范围内的索引全扫描，常用于where子句中含between,&gt;,&lt;等范围条件的情况。 index: 用索引进行的全表扫描。 all: 全表扫描。 五、possible_keys表示查询可能使用到哪些索引，基于查询访问的列(select子句中的字段)和比较操作符来判断的。 六、key:显示查询使用的索引，如果为null，则未使用索引。若使用覆盖索引^标注，则该索引不会出现在possible_key中。 七、key_len:表示索引使用的字节数。对于复合索引，key_len可以帮助判断是否充分用上索引，判断多列索引中用到哪些列。 八、ref:显示了key中索引查找时，作为查找条件用到的列或常量。 九、rows根据表统计信息及索引选用情况，大致估算找到所需记录需要读取的行数。不是结果集行数。 十、extra:包含不适合出现在其他列的额外重要信息。 using filesort(避免出现): MySQL对数据使用一个外部的索引排序，而不是按照表内的索引顺序读取。MySQL中无法用索引完成的排序操作成为“文件排序”。（排序的字段未使用到索引） using temporary(避免出现): 使用临时表保存中间结果。常见于order by 和 group by。 using index: select操作使用了覆盖索引，避免了对数据行的操作。效率不错。","categories":[{"name":"mysql","slug":"mysql","permalink":"http://wus-bit.github.io/categories/mysql/"},{"name":"explain关键字","slug":"mysql/explain关键字","permalink":"http://wus-bit.github.io/categories/mysql/explain%E5%85%B3%E9%94%AE%E5%AD%97/"}],"tags":[{"name":"mysql基础","slug":"mysql基础","permalink":"http://wus-bit.github.io/tags/mysql%E5%9F%BA%E7%A1%80/"}]},{"title":"markdown基本操作","slug":"markdown基本操作","date":"2020-04-15T13:20:38.000Z","updated":"2020-04-16T01:50:28.004Z","comments":true,"path":"markdown基本操作/","link":"","permalink":"http://wus-bit.github.io/markdown%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","excerpt":"作为一个markdown初学者，仅以此文作为markdown基本语法实操练习，及发文章的demo。文中涉及了markdown的基本语法，供在源代码模式下记忆练习。 加油！！！","text":"作为一个markdown初学者，仅以此文作为markdown基本语法实操练习，及发文章的demo。文中涉及了markdown的基本语法，供在源代码模式下记忆练习。 加油！！！ 一级标题二级标题三级标题写博客：git bash里输入指令： hexo new &lt;文件名&gt; 在_posts里生成新的.md文件，编辑即可 hexo g &amp;&amp; hexo d 我也是一级标题我是二级标题加粗我也是粗体斜体我也是斜体我也是斜体加粗斜体加粗删除线==高亮==我有下划线这里创建了一个关于我的脚注[^ME][^ME]: 我是Wu 我是^上标^我是下标== (3)列表== *号 +号 -号都能列表 一二三四五 上山打老虎 一二三四五 列表嵌套只需在子列表中的选项添加四个空格即可： 第一个列表： 第一个元素 第2个 第二个： 1 2 区块配列表： Java面向对象： 封装性继承性多态性 代码块：printf() 1234int main()&#123; return 0;&#125; public class Person { private string name; }链接这是我的博客主页：WuS-bit百度：http://baidu.com高级链接：这个链接用1作为网址变量 baidu在文档末尾给1赋值 == 表格 == mon tue wed thu fri 上山 上山 上山 伤寒 上山 1printf(); 代码块：public static void main(){ system.out.println(&quot;Hello World&quot;); }段落：Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。当然也可以在段落后面使用一个空行来表示重新开始一个段落。 插入图片：开头一个感叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的&apos;title&apos;属性的文字。这是我的微信图像： 标签指定图片大小：高级： 横向流程图源码格式： 123456graph LRA[方形] --&gt;B(圆角) B --&gt; C&#123;条件a&#125; C --&gt;|a&#x3D;1| D[结果1] C --&gt;|a&#x3D;2| E[结果2] F[横向流程图] 竖向流程图源码格式： 123456graph TDA[方形] --&gt; B(圆角) B --&gt; C&#123;条件a&#125; C --&gt; |a&#x3D;1| D[结果1] C --&gt; |a&#x3D;2| E[结果2] F[竖向流程图] 标准流程图源码格式： 123456789st&#x3D;&gt;start: 开始框op&#x3D;&gt;operation: 处理框cond&#x3D;&gt;condition: 判断框(是或否?)sub1&#x3D;&gt;subroutine: 子流程io&#x3D;&gt;inputoutput: 输入输出框e&#x3D;&gt;end: 结束框st-&gt;op-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op 标准流程图源码格式（横向）： 123456789st&#x3D;&gt;start: 开始框op&#x3D;&gt;operation: 处理框cond&#x3D;&gt;condition: 判断框(是或否?)sub1&#x3D;&gt;subroutine: 子流程io&#x3D;&gt;inputoutput: 输入输出框e&#x3D;&gt;end: 结束框st(right)-&gt;op(right)-&gt;condcond(yes)-&gt;io(bottom)-&gt;econd(no)-&gt;sub1(right)-&gt;op UML时序图源码样例： 12345对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象A-&gt;对象B: 你真的好吗？ UML时序图源码复杂样例： 1234567891011Title: 标题：复杂使用对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象B-&gt;小三: 你好吗小三--&gt;&gt;对象A: 对象B找我了对象A-&gt;对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩 UML标准时序图样例： 123456789101112%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头 sequenceDiagram participant 张三 participant 李四 张三-&gt;王五: 王五你好吗？ loop 健康检查 王五-&gt;王五: 与疾病战斗 end Note right of 王五: 合理 食物 &lt;br&#x2F;&gt;看医生... 李四--&gt;&gt;张三: 很好! 王五-&gt;李四: 你怎么样? 李四--&gt;王五: 很好! 甘特图样例： 12345678910111213141516171819%% 语法示例 gantt dateFormat YYYY-MM-DD title 软件开发甘特图 section 设计 需求 :done, des1, 2014-01-06,2014-01-08 原型 :active, des2, 2014-01-09, 3d UI设计 : des3, after des2, 5d 未来任务 : des4, after des3, 5d section 开发 学习准备理解需求 :crit, done, 2014-01-06,24h 设计框架 :crit, done, after des2, 2d 开发 :crit, active, 3d 未来任务 :crit, 5d 耍 :2d section 测试 功能测试 :active, a1, after des3, 3d 压力测试 :after a1 , 20h 测试报告 : 48h","categories":[{"name":"学习效率","slug":"学习效率","permalink":"http://wus-bit.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%95%88%E7%8E%87/"},{"name":"markdown","slug":"学习效率/markdown","permalink":"http://wus-bit.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%95%88%E7%8E%87/markdown/"}],"tags":[{"name":"markdwon入门","slug":"markdwon入门","permalink":"http://wus-bit.github.io/tags/markdwon%E5%85%A5%E9%97%A8/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-04-14T10:51:22.914Z","updated":"2020-04-15T13:12:06.205Z","comments":true,"path":"hello-world/","link":"","permalink":"http://wus-bit.github.io/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"数据库课程","slug":"数据库课程","permalink":"http://wus-bit.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BE%E7%A8%8B/"},{"name":"事务、恢复系统、并发控制","slug":"数据库课程/事务、恢复系统、并发控制","permalink":"http://wus-bit.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BE%E7%A8%8B/%E4%BA%8B%E5%8A%A1%E3%80%81%E6%81%A2%E5%A4%8D%E7%B3%BB%E7%BB%9F%E3%80%81%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"},{"name":"mysql","slug":"mysql","permalink":"http://wus-bit.github.io/categories/mysql/"},{"name":"explain关键字","slug":"mysql/explain关键字","permalink":"http://wus-bit.github.io/categories/mysql/explain%E5%85%B3%E9%94%AE%E5%AD%97/"},{"name":"学习效率","slug":"学习效率","permalink":"http://wus-bit.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%95%88%E7%8E%87/"},{"name":"markdown","slug":"学习效率/markdown","permalink":"http://wus-bit.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%95%88%E7%8E%87/markdown/"}],"tags":[{"name":"数据库课程学习","slug":"数据库课程学习","permalink":"http://wus-bit.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/"},{"name":"mysql基础","slug":"mysql基础","permalink":"http://wus-bit.github.io/tags/mysql%E5%9F%BA%E7%A1%80/"},{"name":"markdwon入门","slug":"markdwon入门","permalink":"http://wus-bit.github.io/tags/markdwon%E5%85%A5%E9%97%A8/"}]}