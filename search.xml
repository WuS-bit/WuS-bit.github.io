<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>conda安装pytorch</title>
      <link href="/conda%E5%AE%89%E8%A3%85pytorch/"/>
      <url>/conda%E5%AE%89%E8%A3%85pytorch/</url>
      
        <content type="html"><![CDATA[<h1 id="conda安装pytorch"><a href="#conda安装pytorch" class="headerlink" title="conda安装pytorch"></a>conda安装pytorch</h1><p>因课程学习需要，刚刚开始接触pytorch,因此本文仅简单讲述如何通过conda安装pytorch，记录自己安装操作过程，并不对pytorch过多介绍，若后期对其深入一二，可能会写一篇文章简单记录学习看法。</p><a id="more"></a><h3 id="一、前提：已安装anaconda，了解基本操作"><a href="#一、前提：已安装anaconda，了解基本操作" class="headerlink" title="一、前提：已安装anaconda，了解基本操作"></a>一、前提：已安装anaconda，了解基本操作</h3><p>基于Anaconda可以便捷地获取包并对包进行管理。若尚未安装可参照该文进行安装配置：<a href="https://xuzf-git.github.io/posts/55263.html" target="_blank" rel="noopener">安装Anaconda &amp; conda指令入门 - xuzf</a></p><h3 id="二、安装过程"><a href="#二、安装过程" class="headerlink" title="二、安装过程"></a>二、安装过程</h3><ol><li>在确保安装好anaconda且添加好镜像(详情见上文推荐博客)之后，先进入其官网转转：<a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener">pytorch官网get-start</a><br><img src="/img/pytorchlearning/start/install.png" alt="get-start"></li><li>为避免框架之间包冲突，因此先创建一个虚拟环境，在此环境下进行后续操作<blockquote><p>创建环境：conda create -name env_name python=3.7  (env_name替换为自己的环境名)<br>进入环境：conda activate env_name</p></blockquote></li><li>安装gpu版pytorch<blockquote><p>安装指令：conda install pytorch torchvision cudatoolkit<br>注：不要按照官网指令后面加：-c pytorch，否则无法用到镜像源<br>此步过程中可能较多次出现如下问题：<br><img src="/img/pytorchlearning/start/error.png" alt="error"><br>保持耐心，多次尝试！</p></blockquote></li><li>安装成功后，进行测试<br><img src="/img/pytorchlearning/start/test.png" alt="test"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> pytorch安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务-系统恢复-并发控制</title>
      <link href="/%E4%BA%8B%E5%8A%A1-%E7%B3%BB%E7%BB%9F%E6%81%A2%E5%A4%8D-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
      <url>/%E4%BA%8B%E5%8A%A1-%E7%B3%BB%E7%BB%9F%E6%81%A2%E5%A4%8D-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>本文用以记录数据库概念专业课学习过程中事务，系统恢复，并发控制章节中的重要概念（更新中……）</p><a id="more"></a><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="一、事物的概念："><a href="#一、事物的概念：" class="headerlink" title="一、事物的概念："></a>一、事物的概念：</h3><blockquote><p>事务是构成单一逻辑工作单元的操作的集合。比如：将钱从一个账户转到另一个帐户就是一个事务，该事务包括分别对两个庄户的更新操作。</p></blockquote><h3 id="二、事务的特性（ACID）"><a href="#二、事务的特性（ACID）" class="headerlink" title="二、事务的特性（ACID）"></a>二、事务的特性（ACID）</h3><blockquote><ol><li>原子性(Atomicity)：事务是不可分的。事务的所有动作要么全部执行，要么由于出错而撤销事务的影响。</li><li>一致性(consistency)：事务产生的结果只能使数据库从一个状态转移到另一状态且保持一致。即当事务成功提交时，保存一致性结果。而当事务尚未完成就中断时，应回滚事务部分操作对数据库的影响。</li><li>隔离性(isolation)：事务的隔离性是指一个事务的执行不能影响到另一个事务，即一个事务的内部操作相对于外部事务是隔离的。</li><li>持久性(durability)：一个事务成功完成后，他对数据库的修改必须是永久的，即使出现系统故障。</li></ol></blockquote><h3 id="三、事务的状态"><a href="#三、事务的状态" class="headerlink" title="三、事务的状态"></a>三、事务的状态</h3><blockquote><ol><li>活跃的(active)：初始状态，事务执行过程中处于这个状态。</li><li>部分提交(partially committed)：事务的最后一条语句执行后。此时，事务中对数据的操作已经全部完成，但结果数据还驻留在内存中。因此，如果在此状态时，系统出现故障仍可能使事务不得不终止</li><li>失败的(failed)：如果事务不能正常执行，事务就进入失败状态。这意味着事务没有成功地完成，必须回滚。回滚（Rollback）就是撤消事务已经做出任何数据更改。一旦事务造成的所有更改被撤消，我们就说事务已回滚。</li><li>中止的(aborted)：事务回滚并且数据库已经恢复到事务执行前的状态。</li><li>提交状态(committed)： 事务成功完成后。向日志记录中写入一条事务日志信息，并将事务对数据的更改完全写入磁盘时，标志着事务成功完成，这时事务就进入了提交状态。事务成功执行之后，更新结果转存到永久存储器上，因此，事务一旦提交，即使出现了故障，事务所做的数据更新也能在系统重新启动后恢复。</li></ol></blockquote><h2 id="恢复系统"><a href="#恢复系统" class="headerlink" title="恢复系统"></a>恢复系统</h2><h3 id="四、故障分类"><a href="#四、故障分类" class="headerlink" title="四、故障分类"></a>四、故障分类</h3><blockquote><ul><li>事务故障：有两种错误可能造成事务执行失败。<ol><li>逻辑错误：事务由于内部条件而无法正常执行。如非法输入，超出资源等。如在转账事务中需要将一笔金额由一个账户转入另一个账户，但在操作过程中发现余额不够，不能转出。这种情况可由应用程序安排一个ROLLBACK中止事务的执行。该类错误由程序自身解决。</li><li>系统错误：系统进入一种不良状态（如死锁），事务无法继续执行。由系统处理。</li></ol></li><li>系统崩溃：系统故障是指造成系统停止运行的任何事件，如硬件故障、操作系统或DBMS故障、突然停电等。这些情况发生时，正在执行着的所有事务将突然中断，导致内存中保留的事务数据都被丢失，数据可能处在不一致的状态。</li><li>磁盘故障：存储设备故障主要指辅助存储的介质受到破坏，如磁盘的磁头碰撞使部分磁介质损坏等。这类故障不但影响活动着的所有事务，而且使被损坏介质的数据丢失，数据库遭到严重破坏。</li></ul></blockquote><h3 id="五、数据库恢复技术"><a href="#五、数据库恢复技术" class="headerlink" title="五、数据库恢复技术"></a>五、数据库恢复技术</h3><ol><li><p>基本原理：建冗余数据，即利用存储在系统其他地方（与数据分离）的冗余数据来实现恢复。</p><blockquote><p><strong>建立冗余数据的常用技术：</strong></p><ul><li>数据转储</li><li>记录日志文件</li></ul></blockquote></li><li><p>数据转储：DBA定期地将整个数据库复制到磁带或另一个磁盘上作为备份保存。</p><ul><li>转储方式：<ul><li>静态转储与动态转储</li><li>海量转储与增量转储</li></ul></li></ul></li><li><p>基于日志的数据库恢复：在修改数据库本身之前，首先向稳定存储器中输入修改描述信息，再执行修改操作，以确保已提交事务的修改能永久存储，中止的事务可回滚。<strong>日志记录技术要保证先写日志，再修改数据</strong></p><blockquote><ol><li>日志记录的基本格式：</li></ol><ul><li>事务标识(T<del>i</del>)：执行写操作事务的唯一标识</li><li>数据项标识(X<del>j</del>)：所写数据项的唯一标识。通常是数据项在磁盘上的位置，包括数据项所驻留的块的块标识及块内偏移量。</li><li>旧值(V<del>1</del>)：数据项的写前值。</li><li>新值(V<del>2</del>)：数据项的写后值。<br>一般表示未&lt;T<del>i</del>, X<del>j</del>, V<del>1</del>,  V<del>2</del>&gt;。<br>&lt;T<del>i</del> start&gt; 事务T<del>i</del>开始。<br>&lt;T<del>i</del> commit&gt; 事务T<del>i</del>提交，表示事务对数据库的所有修改已提交到缓冲区，不能确定是否更新了磁盘。<br>&lt;T<del>i</del> abort&gt; 事务T<del>i</del>中止。</li></ul><ol start="2"><li>基于日志的恢复技术：<ol><li>redo：对于已提交的写操作，当系统发生故障崩溃时，用redo重做事务，恢复已完成的事务。</li><li>undo：对于修改了数据库但未提交的事务，利用undo撤销事务的影响。</li></ol></li></ol></blockquote></li></ol><h3 id="六、检查点恢复技术"><a href="#六、检查点恢复技术" class="headerlink" title="六、检查点恢复技术"></a>六、检查点恢复技术</h3><ol><li><p>检查点的引入：为减少日志记录的搜索规模并减少重复的redo操作，引入检查点技术，即在日志文件中加一个表示数据库是否正常运行的标识。<strong>检查点写入时保证（1）此时不允许有任何更新操作（2）将所有更新过的缓冲块写入磁盘(保证检查点之前已提交的事务已写入磁盘，中止事务已回滚)</strong></p></li><li><p>写入检查点：</p><blockquote><p>检查点记录内容：</p><ol><li>建立检查点时刻所有正在执行的事务清单（以&lt;T<del>i</del> commit&gt;, &lt;T<del>i</del> abort&gt;作为执行完成标识）</li><li>这些事务最近一个日志记录的地址</li></ol></blockquote></li><li><p>检查点的执行过程：</p><blockquote><ol><li>将当前位于主存的所有日志记录输出到稳定存储器。</li><li>将所有修改操作结果的缓冲块写入磁盘</li><li>将一个日志记录<checkpoint L>写入稳定存储器，L是建立检查点时刻所有正在执行的事务清单<ol start="4"><li>将检查点记录在日志文件中的地址写入重启动文件。</li></ol></li></ol></blockquote></li><li><p>利用价差点的恢复步骤：</p><blockquote><ol><li>在重启动文件中找到最后一个检查点记录</li><li>将检查点时刻事务清单中的事务暂时 放到undo队列。</li><li>从检查点开始正向扫描日志文件，<ul><li>若有新开始的事务，暂时放入Undo队列。</li><li>若有提交事务T<del>j</del>，把T<del>j</del>从Undo队列移到redo队列</li></ul></li><li>反向扫描日志文件对undo队列中的事务进行undo</li><li>再次正向扫描，对redo 队列中的事务进行redo</li></ol></blockquote></li></ol><h3 id="七、数据库的镜像恢复技术（涉及负载均衡，主从复制等后期补充）"><a href="#七、数据库的镜像恢复技术（涉及负载均衡，主从复制等后期补充）" class="headerlink" title="七、数据库的镜像恢复技术（涉及负载均衡，主从复制等后期补充）"></a>七、数据库的镜像恢复技术（涉及负载均衡，主从复制等后期补充）</h3><ol><li>概念：为预防介质故障，DBA周期性地转储数据库。</li><li>使用：<blockquote><ol><li>出现介质故障：<ul><li>可由镜像磁盘继续提供使用</li><li>同时DBMS自动利用镜像磁盘数据进行数据库恢复</li></ul></li><li>未出现故障时<ul><li>主从复制、读写分离：对于并发操作，一个用户对数据库加排他锁，其他用户可对镜像进行读取操作，提高并发性</li><li>负载均衡</li></ul></li></ol></blockquote></li></ol><p>. </p>]]></content>
      
      
      <categories>
          
          <category> 数据库课程 </category>
          
          <category> 事务、恢复系统、并发控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库课程学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>explain关键字</title>
      <link href="/explain%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/explain%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>在MySQL中，可以使用<strong><em>explain</em></strong>关键字来获取模拟优化器执行SQL语句的结果，从而知道MySQL是如何执行查询语句的，进而分析查询语句或是表结构的性能瓶颈，方便进行性能优化。</p><a id="more"></a><h1 id="Explain关键字"><a href="#Explain关键字" class="headerlink" title="Explain关键字"></a>Explain关键字</h1><h2 id="语法：-explain-SQL；"><a href="#语法：-explain-SQL；" class="headerlink" title="语法： explain + SQL；"></a>语法： explain + SQL；</h2><p>先上一个demo，留下印象：<br><img src="/img/mysql_learning/explain/explaindemo.png" alt="demo"></p><h2 id="Explain中的列"><a href="#Explain中的列" class="headerlink" title="Explain中的列"></a>Explain中的列</h2><h3 id="一、id列"><a href="#一、id列" class="headerlink" title="一、id列"></a>一、id列</h3><p>总是一组数字，是select查询的序列号，用来标识查询中执行select子句或操作表的顺序。</p><p>情况分析</p><ul><li>id相同时，从上到下顺序执行操作表（mysql的查询计划是左深树）</li><li>id不同时，id值越大越先执行</li><li>当查询语句不含子查询或联合(Union)时id总为1</li><li>当出现子查询时，id会增大<br> <img src="/img/mysql_learning/explain/iddemo.png" alt="id"></li></ul><h3 id="二、select-type"><a href="#二、select-type" class="headerlink" title="二、select_type"></a>二、select_type</h3><p>表示查询类型</p><blockquote><ol><li>SIMPLE:简单的select查询，查询中不包括子查询或union</li><li>PRIMARY:查询中包括任何复杂的子部分，最外层查询被标记为primary</li><li>SUBQUERY:在select或where子句中的子查询</li><li>DERIVED:from子句中的子查询被标记为derived(衍生)，MySQL会递归地执行这些子查询，结果放在临时表</li><li>UNION：出现在UNION后的那个select查询会被标记为UNION</li><li>UNION RESULT:从UNION表获取结果的select</li></ol></blockquote><h3 id="三、table"><a href="#三、table" class="headerlink" title="三、table"></a>三、table</h3><p>表示该查询是关于的那张表</p><h3 id="四、type"><a href="#四、type" class="headerlink" title="四、type"></a>四、type</h3><p>显示查询使用了哪种类型(访问类型)</p><p>常见访问类型效率从最好到最差：system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all<br>一般来说，查询至少到range级别，最好达到ref</p><blockquote><ol><li>system：表中只有一行记录。</li><li>const: 通常是以primary key 或 unique索引作为where子句，且比较条件是键可取值中 的一个常量，通过一次索引便可找到。例如：select * from st where id = 1;</li><li>eq_ref: 这种访问类型，MySQL知道最多只返回一条符合条件的记录。也是以主键或唯一性索引查找，但比较条件不是常量（另一表中的参考值）。</li><li>ref: 用非唯一性索引查找，返回匹配某单个值的所有行。是查找和扫描的混合体。</li><li>range: 范围扫描，即一个限制范围内的索引全扫描，常用于where子句中含between,&gt;,&lt;等范围条件的情况。</li><li>index: 用索引进行的全表扫描。</li><li>all: 全表扫描。</li></ol></blockquote><h3 id="五、possible-keys"><a href="#五、possible-keys" class="headerlink" title="五、possible_keys"></a>五、possible_keys</h3><p>表示查询可能使用到哪些索引，基于查询访问的列(select子句中的字段)和比较操作符来判断的。</p><h3 id="六、key"><a href="#六、key" class="headerlink" title="六、key:"></a>六、key:</h3><p>显示查询使用的索引，如果为null，则未使用索引。若使用覆盖索引<a href="某个复合索引包含select子句中的所有列，则只需根据该索引返回结果，不必再读取数据文件。查询列被所建索引覆盖。不可用select*">^标注</a>，则该索引不会出现在possible_key中。</p><h3 id="七、key-len"><a href="#七、key-len" class="headerlink" title="七、key_len:"></a>七、key_len:</h3><p>表示索引使用的字节数。对于复合索引，key_len可以帮助判断是否充分用上索引，判断多列索引中用到哪些列。</p><h3 id="八、ref"><a href="#八、ref" class="headerlink" title="八、ref:"></a>八、ref:</h3><p>显示了key中索引查找时，作为查找条件用到的列或常量。</p><h3 id="九、rows"><a href="#九、rows" class="headerlink" title="九、rows"></a>九、rows</h3><p>根据表统计信息及索引选用情况，大致估算找到所需记录需要读取的行数。不是结果集行数。</p><h3 id="十、extra"><a href="#十、extra" class="headerlink" title="十、extra:"></a>十、extra:</h3><p>包含不适合出现在其他列的额外重要信息。 </p><blockquote><p>using filesort(避免出现): MySQL对数据使用一个外部的索引排序，而不是按照表内的索引顺序读取。MySQL中无法用索引完成的排序操作成为“文件排序”。（排序的字段未使用到索引）</p><p>using temporary(避免出现): 使用临时表保存中间结果。常见于order by 和 group by。</p><p>using index: select操作使用了覆盖索引，避免了对数据行的操作。效率不错。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
          <category> explain关键字 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基本操作</title>
      <link href="/markdown%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/markdown%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>作为一个markdown初学者，仅以此文作为markdown基本语法实操练习，及发文章的demo。文中涉及了markdown的基本语法，供在源代码模式下记忆练习。  加油！！！</p><a id="more"></a><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="写博客："><a href="#写博客：" class="headerlink" title="写博客："></a>写博客：</h4><pre><code>git bash里输入指令： hexo new &lt;文件名&gt;在_posts里生成新的.md文件，编辑即可hexo g  &amp;&amp;  hexo d </code></pre><h1 id="我也是一级标题"><a href="#我也是一级标题" class="headerlink" title="我也是一级标题"></a>我也是一级标题</h1><h2 id="我是二级标题"><a href="#我是二级标题" class="headerlink" title="我是二级标题"></a>我是二级标题</h2><p><strong>加粗</strong><br><strong>我也是粗体</strong><br><em>斜体</em><br><em>我也是斜体</em><br><strong><em>我也是斜体加粗</em></strong><br><strong><em>斜体加粗</em></strong><br><del>删除线</del><br>==高亮==<br><u>我有下划线</u><br>这里创建了一个关于我的脚注[^ME]<br>[^ME]:   我是Wu </p><p>我是^上标^<br>我是<del>下标</del><br>== (3)列表==</p><h3 id="号-号-号都能列表"><a href="#号-号-号都能列表" class="headerlink" title="*号 +号 -号都能列表"></a>*号 +号 -号都能列表</h3><ul><li>一二三四五<ul><li>上山打老虎</li></ul></li></ul><ol><li>一二三四五</li></ol><h3 id="列表嵌套只需在子列表中的选项添加四个空格即可："><a href="#列表嵌套只需在子列表中的选项添加四个空格即可：" class="headerlink" title="列表嵌套只需在子列表中的选项添加四个空格即可："></a>列表嵌套只需在子列表中的选项添加四个空格即可：</h3><ol><li>第一个列表：<ul><li>第一个元素</li><li>第2个</li></ul></li><li>第二个：<ul><li>1</li><li>2</li></ul></li></ol><h3 id="区块配列表："><a href="#区块配列表：" class="headerlink" title="区块配列表："></a>区块配列表：</h3><ol><li>Java面向对象：<blockquote><p>封装性<br>继承性<br>多态性</p></blockquote></li></ol><h3 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h3><p><code>printf()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>public class Person {    private string name;}</code></pre><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="这是我的博客主页：WuS-bit"><a href="#这是我的博客主页：WuS-bit" class="headerlink" title="这是我的博客主页：WuS-bit"></a>这是我的博客主页：<a href="https://WuS-bit.github.io">WuS-bit</a></h4><h3 id="百度：http-baidu-com"><a href="#百度：http-baidu-com" class="headerlink" title="百度：http://baidu.com"></a>百度：<a href="http://baidu.com" target="_blank" rel="noopener">http://baidu.com</a></h3><h3 id="高级链接："><a href="#高级链接：" class="headerlink" title="高级链接："></a>高级链接：</h3><p>这个链接用1作为网址变量 [baidu][1]<br>在文档末尾给1赋值</p><p>== 表格 ==</p><table><thead><tr><th>mon</th><th align="right">tue</th><th>wed</th><th>thu</th><th>fri</th><th></th></tr></thead><tbody><tr><td>上山</td><td align="right">上山</td><td>上山</td><td>伤寒</td><td>上山</td><td></td></tr></tbody></table><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf();</span><br></pre></td></tr></table></figure><h4 id="代码块：-1"><a href="#代码块：-1" class="headerlink" title="代码块："></a>代码块：</h4><pre><code>public static void main(){    system.out.println(&quot;Hello World&quot;);}</code></pre><h2 id="段落："><a href="#段落：" class="headerlink" title="段落："></a>段落：</h2><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。<br>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p><h3 id="插入图片："><a href="#插入图片：" class="headerlink" title="插入图片："></a>插入图片：</h3><pre><code>开头一个感叹号 !接着一个方括号，里面放上图片的替代文字接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的&apos;title&apos;属性的文字。</code></pre><h4 id="这是我的微信图像："><a href="#这是我的微信图像：" class="headerlink" title="这是我的微信图像： "></a>这是我的微信图像： <img src="C:%5CUsers%5CWuShang%5CDesktop%5Cavatar.jpg" alt="微信头像"></h4><h4 id="标签指定图片大小："><a href="#标签指定图片大小：" class="headerlink" title="标签指定图片大小："></a><img>标签指定图片大小：</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="C:\Users\WuShang\Desktop\avatar.jpg" width="50%"></h4><h2 id="高级："><a href="#高级：" class="headerlink" title="高级："></a>高级：</h2><ol><li><p>横向流程图源码格式：</p><pre class="mermaid">graph LRA[方形] -->B(圆角) B --> C{条件a} C -->|a=1| D[结果1] C -->|a=2| E[结果2] F[横向流程图]</pre></li><li><p>竖向流程图源码格式：</p><pre class="mermaid">graph TDA[方形] --> B(圆角) B --> C{条件a} C --> |a=1| D[结果1] C --> |a=2| E[结果2] F[竖向流程图]</pre></li><li><p>标准流程图源码格式：</p><div id="flowchart-0" class="flow-chart"></div></li><li><p>标准流程图源码格式（横向）：</p><div id="flowchart-1" class="flow-chart"></div></li><li><p>UML时序图源码样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure></li><li><p>UML时序图源码复杂样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure></li><li><p>UML标准时序图样例：</p><pre class="mermaid">%% 时序图例子,-> 直线，-->虚线，->>实线箭头sequenceDiagram participant 张三 participant 李四 张三->王五: 王五你好吗？ loop 健康检查     王五->王五: 与疾病战斗 end Note right of 王五: 合理 食物 <br/>看医生... 李四-->>张三: 很好! 王五->李四: 你怎么样? 李四-->王五: 很好!</pre></li><li><p>甘特图样例：</p><pre class="mermaid">%% 语法示例     gantt     dateFormat  YYYY-MM-DD     title 软件开发甘特图     section 设计     需求                      :done,    des1, 2014-01-06,2014-01-08     原型                      :active,  des2, 2014-01-09, 3d     UI设计                     :         des3, after des2, 5d 未来任务                     :         des4, after des3, 5d     section 开发     学习准备理解需求                      :crit, done, 2014-01-06,24h     设计框架                             :crit, done, after des2, 2d     开发                                 :crit, active, 3d     未来任务                              :crit, 5d     耍                                   :2d     section 测试     功能测试                              :active, a1, after des3, 3d     压力测试                               :after a1  , 20h     测试报告                               : 48h</pre></li></ol><p>[1]: <a href="http://baidu.com" target="_blank" rel="noopener">http://baidu.com</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st->op->condcond(yes)->io->econd(no)->sub1(right)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st(right)->op(right)->condcond(yes)->io(bottom)->econd(no)->sub1(right)->op</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script></p>]]></content>
      
      
      <categories>
          
          <category> 学习效率 </category>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdwon入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
