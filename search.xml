<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于二分类器的命名实体识别</title>
      <link href="/%E5%9F%BA%E4%BA%8E%E4%BA%8C%E5%88%86%E7%B1%BB%E5%99%A8%E7%9A%84%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB/"/>
      <url>/%E5%9F%BA%E4%BA%8E%E4%BA%8C%E5%88%86%E7%B1%BB%E5%99%A8%E7%9A%84%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>课程第一次大作业：基于北大语料库，做机构实体识别任务。</p><a id="more"></a><h1 id="基于二分类的命名实体识别实验报告"><a href="#基于二分类的命名实体识别实验报告" class="headerlink" title="基于二分类的命名实体识别实验报告"></a>基于二分类的命名实体识别实验报告</h1><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>  作为一个从没有过课程相关内容学习和实操经验的小白，一开始接触到这次作业完全没有头绪，上课时仅能从数学运算的角度理解一些公式和原理，但涉及到作业任务的具体实现，根本没有思路，不知从何处下手。经历了苦闷与挣扎，也在老师和同学的帮助下渐渐有了实现的思路，于是经过自学和不断的“面向搜索引擎编程”解决遇到的各种问题，终于完成了第一次作业。尽管实现过程及结果可能不是最好，但个人对于自己在完成这次作业的过程中取得的收获比较满意。也希望自己在课程后续学习及作业完成过程中继续进步。</p><h3 id="二、具体实现过程"><a href="#二、具体实现过程" class="headerlink" title="二、具体实现过程"></a>二、具体实现过程</h3><pre><code>1. 概述：整个作业实现过程大体分为：处理语料库，特征提取（one-hot编码），训练过程实现。</code></pre><h4 id="1-处理语料库"><a href="#1-处理语料库" class="headerlink" title="1. 处理语料库"></a>1. 处理语料库</h4><p>初始语料库样例：<img src="/img/images/01.png" alt="语料库"></p><p>要求：</p><ol><li>将语料库分为训练集、验证集、测试集。</li><li>提取出所有汉字词语（去除标签标记）</li><li>提取对应词语的标签作为y</li></ol><p>思路及要点：</p><ol><li>手工划分语料库为训练集、验证集、测试集</li><li>通过<strong>文件IO</strong>读入语料数据集，转化为内存中的字符串形式</li><li>运用<strong>正则表达式</strong>及python的<strong>re模块</strong>对字符串进行词语匹配及切割</li></ol><blockquote><p>先匹配并抽取出所有复合机构，将复合机构拆分，并将内部实体的y均标注为1</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复合机构的正则表达式 形如[a/nt ...  d/n]nt</span></span><br><span class="line">patt1 = re.compile(<span class="string">r"\[[\u4E00-\u9FA5\s/a-z]+]nt"</span>)</span><br><span class="line"><span class="comment"># 抽取复合机构名</span></span><br><span class="line"><span class="comment"># arr 复合机构名列表</span></span><br><span class="line">arr = patt1.findall(txt)</span><br><span class="line"><span class="comment"># text为将复合机构名替换为空串后剩余文本</span></span><br><span class="line">text = patt1.split(txt)</span><br><span class="line"><span class="comment"># 获取复合机构的所有实体词加入词语列表k，将词语对应标签列表v全设为1</span></span><br><span class="line">item = arr[j][<span class="number">1</span>:<span class="number">-3</span>]</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line">temp = re.findall(<span class="string">r"[\u4E00-\u9FA5]+"</span>, item)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> temp:</span><br><span class="line">k.append(i)</span><br><span class="line">v.append(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>处理剩余语料，分别完善对应的词列表和标签列表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配汉字及其标注的正则表达式 形如：主席/n  江/nrf</span></span><br><span class="line">patt2 = re.compile(<span class="string">r"[\u4E00-\u9FA5]+[/a-z]+"</span>)</span><br><span class="line"><span class="comment"># 分别找出汉字及其标注，加入对应列表</span></span><br><span class="line">temp = patt2.findall(item)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> temp:</span><br><span class="line">        s = re.split(<span class="string">r"/"</span>, i)</span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">1</span>] == <span class="string">'nt'</span>:</span><br><span class="line">            k.append(s[<span class="number">0</span>])</span><br><span class="line">            v.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k.append(s[<span class="number">0</span>])</span><br><span class="line">            v.append(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>词列表处理结果样例：<img src="/img/images/02.png" alt="词列表样例"></li></ol><h4 id="2-特征提取-one-hot编码"><a href="#2-特征提取-one-hot编码" class="headerlink" title="2. 特征提取(one-hot编码)"></a>2. 特征提取(one-hot编码)</h4><p>要求：根据训练集语料构建一个500词的词典，将语料中的每一词转化为包括前一词、当前词、后一词信息的1500维向量。</p><p>思路及要点：</p><ol><li><strong>构建500词词典</strong>，<strong>取训练集语料词频前499</strong>及一个表示非词典的词构成该词典(用词典的第500个位置表示)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练集词频统计，取词频前499构建词典</span></span><br><span class="line">counts = &#123;&#125;</span><br><span class="line">dic = []</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> k1:</span><br><span class="line">    counts[key] = counts.get(key, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">items = list(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">499</span>):</span><br><span class="line">    key, count = items[i]</span><br><span class="line">    dic.append(key)</span><br></pre></td></tr></table></figure><ol start="2"><li>将词语列表中的词转为<strong>one-hot</strong>向量（封装成一个函数，训练过程分批调用）。one-hot编码即：将词语出现在词典中的位置对应的向量维度上置1，其余全置0。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 依据所构建的词典将词语转化成one-hot</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_one_hot</span><span class="params">(k, dic, s, n)</span>:</span></span><br><span class="line">    <span class="comment"># 批量处理的起始位置</span></span><br><span class="line">    s = s*n</span><br><span class="line">    <span class="comment"># 词向量列表</span></span><br><span class="line">    tensors = t.zeros(n, <span class="number">1500</span>)</span><br><span class="line">    <span class="comment"># 遍历k的取词部分 对每一个词构造one-hot</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(s, s+n):</span><br><span class="line">        <span class="comment"># 存放前一向词量</span></span><br><span class="line">        x_0 = t.zeros(<span class="number">500</span>)</span><br><span class="line">        <span class="comment"># 存放当前词向量</span></span><br><span class="line">        x_1 = t.zeros(<span class="number">500</span>)</span><br><span class="line">        <span class="comment"># 存放后一词向量</span></span><br><span class="line">        x_2 = t.zeros(<span class="number">500</span>)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            x_0[<span class="number">499</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                pos = dic.index(k[i])</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                x_1[<span class="number">499</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x_1[pos] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                pos_next = dic.index(k[i + <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                x_2[<span class="number">499</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x_2[pos_next] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i == k.__len__() - <span class="number">1</span>:</span><br><span class="line">            x_2[<span class="number">499</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                pos = dic.index(k[i])</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                x_1[<span class="number">499</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x_1[pos] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                pos_pre = dic.index(k[i - <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                x_0[<span class="number">499</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x_0[pos_pre] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                pos_pre = dic.index(k[i - <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                x_0[<span class="number">499</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x_0[pos_pre] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                pos = dic.index(k[i])</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                x_1[<span class="number">499</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x_1[pos] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                pos_next = dic.index(k[i + <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                x_2[<span class="number">499</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x_2[pos_next] = <span class="number">1</span></span><br><span class="line">        temp = t.cat((x_0, x_1, x_2))</span><br><span class="line">        tensors[i-s] = temp</span><br><span class="line">    <span class="keyword">return</span> tensors</span><br></pre></td></tr></table></figure><h4 id="3-训练过程（选用批量梯度下降）"><a href="#3-训练过程（选用批量梯度下降）" class="headerlink" title="3. 训练过程（选用批量梯度下降）"></a>3. 训练过程（选用批量梯度下降）</h4><p>要求：分别使用手动求导和自动求导实现批量梯度下降的训练过程，并计算验证集和测试集F1，当F1出现极值时，学到的参数theta为较优模型参数</p><p>思路及要点：</p><ol><li>用sigmoid函数表示似然度：</li></ol><p>$$<br>h_\theta(Y=1\mid X) = \frac{1}{1+e^-\theta^Tx}<br>$$</p><p>$$<br>h_\theta(Y=0\mid X) = 1 - \frac{1}{1+e^-\theta^Tx}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_out = t.sigmoid(theta.mm(x))</span><br></pre></td></tr></table></figure><ol start="2"><li>用极大似然估计定义损失函数：</li></ol><p>$$<br>\begin{aligned}<br>l(\theta)=\log (L(\theta))&amp;=\sum_{i=1}^m \left[y^{(i)}\log h_\theta(1\mid x^{(i)})+(1-y^{(i)})\log (1-h_\theta(1\mid x^{(i)}))\right]\<br>&amp;=\sum_{i=1}^m(y^{(i)}\log g(\theta^Tx^{(i)})+(1-y^{(i)})\log (1-g(\theta^Tx^{(i)})))<br>\end{aligned}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss += (y[jj]*t.log(train_out) + (t.ones(<span class="number">1</span>, <span class="number">1</span>) - y[jj])*t.log(t.ones(<span class="number">1</span>, <span class="number">1</span>)-train_out))</span><br></pre></td></tr></table></figure><ol start="3"><li>对损失函数求导并将结果化简：</li></ol><p>$$<br>\begin{aligned}<br>\frac{\partial l(\theta)}{\partial \theta}&amp; =\sum_{i=1}^m\left[ \frac{y^{(i)}}{g(\theta^Tx^{(i)})}\frac{\partial g(\theta^Tx^{(i)})}{\partial \theta}-\frac{(1-y^{(i)})}{1-g(\theta^Tx^{(i)})}\frac{\partial g(\theta^Tx^{(i)})}{\partial \theta} \right]\<br>&amp; =\sum_{i=1}^m\left[\frac{y^{(i)}}{g(\theta^Tx^{(i)})}-\frac{(1-y^{(i)})}{1-g(\theta^Tx^{(i)})} \right]g(\theta^Tx^{(i)})(1-g(\theta^Tx^{(i)}))x^{(i)}\<br>&amp; =\sum_{i=1}^m\left[y^{(i)}(1-g(\theta^Tx^{(i)}))-(1-y^{(i)})g(\theta^Tx^{(i)}) \right]x^{(i)}\<br>&amp; =\sum_{i=1}^m\left[y^{(i)}-g(\theta^Tx^{(i)}) \right]x^{(i)}<br>\end{aligned}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grad += ((y[jj]-train_out)*x)</span><br></pre></td></tr></table></figure><ol start="4"><li>用批量梯度下降更新<strong>$\theta$</strong>使得损失函数接近取得极值（全局最优）：</li></ol><p>$$<br>\theta := \theta+\alpha\left(\sum_{i=1}^m\left[y^{(i)}-g(\theta^Tx^{(i)}) \right]x^{(i)} \right)<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theta = theta + a*grad</span><br></pre></td></tr></table></figure><p>手动求导实现批量梯度下降过程代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 批量梯度下降</span></span><br><span class="line">batch_size = <span class="number">128</span></span><br><span class="line"><span class="keyword">for</span> ii <span class="keyword">in</span> range(k1.__len__()//batch_size):</span><br><span class="line">    x_1 = utils.to_one_hot(k1, dic, ii, batch_size)</span><br><span class="line">    y = t.tensor(v1[ii*batch_size:ii*batch_size+batch_size])</span><br><span class="line">    loss = t.zeros([<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">    grad = t.zeros(<span class="number">1500</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> range(batch_size):</span><br><span class="line">        x = x_1[jj].view(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">        train_out = t.sigmoid(theta.mm(x))</span><br><span class="line">        loss += (y[jj]*t.log(train_out) + (t.ones(<span class="number">1</span>, <span class="number">1</span>) - y[jj])*t.log(t.ones(<span class="number">1</span>, <span class="number">1</span>)-train_out))</span><br><span class="line">        grad += ((y[jj]-train_out)*x)</span><br><span class="line">    grad = grad.view(<span class="number">1</span>, <span class="number">1500</span>)</span><br><span class="line">    theta = theta + a*grad</span><br></pre></td></tr></table></figure><p>自动求导求导实现批量梯度下降过程代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 批量梯度下降</span></span><br><span class="line">    batch_size = <span class="number">128</span></span><br><span class="line">    <span class="comment"># theta = theta.view(-1, 1)</span></span><br><span class="line">    <span class="comment"># theta.requires_grad_(True)</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> range(k1.__len__()//batch_size):</span><br><span class="line">        x = utils.to_one_hot(k1, dic, ii, batch_size)</span><br><span class="line">        y = t.tensor(v1[ii*batch_size:(ii+<span class="number">1</span>)*batch_size]).view(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">        g = t.sigmoid(t.mm(x, theta))</span><br><span class="line">        loss = t.sum(y*t.log(g) + (<span class="number">1</span>-y)*t.log(<span class="number">1</span>-g))</span><br><span class="line">        loss.backward()</span><br><span class="line">        <span class="keyword">with</span> t.no_grad():</span><br><span class="line">            theta += a*theta.grad</span><br><span class="line">            theta.grad.zero_()</span><br><span class="line">    theta1 = theta.view(<span class="number">1</span>, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>用验证集、测试集检验模型，计算F1</li></ol><table><thead><tr><th align="center">真实情况\模型预测</th><th align="center">True</th><th align="center">False</th></tr></thead><tbody><tr><td align="center">True</td><td align="center">TP</td><td align="center">FN</td></tr><tr><td align="center">False</td><td align="center">FP</td><td align="center">TN</td></tr></tbody></table><blockquote><p>查准率：$P=\frac{TP}{\left(TP+FP \right)}$                  查全率：$R=\frac{TP}{(TP+FN)}$<br>$F1-measure = 2<em>\frac{P</em>R}{P+R}$</p></blockquote><ol start="6"><li><p>结果分析 （手动求导）</p><p>学习率$\alpha$的选取对训练过程结果的影响：<br>$\alpha=1$时</p></li></ol><table><thead><tr><th align="center">迭代轮数\数据集F1</th><th align="center">验证集F1</th><th align="center">测试集F1</th></tr></thead><tbody><tr><td align="center">第一轮</td><td align="center">0.66471734</td><td align="center">0.69189189</td></tr><tr><td align="center">第二轮</td><td align="center">0.67116682</td><td align="center">0.70119521</td></tr><tr><td align="center">第三轮</td><td align="center">0.66601562</td><td align="center">0.69282814</td></tr><tr><td align="center">第四轮</td><td align="center">0.66862745</td><td align="center">0.69282814</td></tr><tr><td align="center">第五轮</td><td align="center">0.66862745</td><td align="center">0.69282814</td></tr><tr><td align="center">第六轮</td><td align="center">0.66797257</td><td align="center">0.69282814</td></tr></tbody></table><p>​        $\alpha=0.1$时</p><table><thead><tr><th align="center">迭代轮数\数据集F1</th><th align="center">验证集F1</th><th align="center">测试集F1</th></tr></thead><tbody><tr><td align="center">第一轮</td><td align="center">0.66342412</td><td align="center">0.69189189</td></tr><tr><td align="center">第二轮</td><td align="center">0.66731898</td><td align="center">0.69189189</td></tr><tr><td align="center">第三轮</td><td align="center">0.66666666</td><td align="center">0.69376693</td></tr><tr><td align="center">第四轮</td><td align="center">0.67315175</td><td align="center">0.69905533</td></tr><tr><td align="center">第五轮</td><td align="center">0.67380720</td><td align="center">0.69905533</td></tr><tr><td align="center">第六轮</td><td align="center">0.67380720</td><td align="center">0.69905533</td></tr></tbody></table><p>​        $\alpha=0.02$时</p><table><thead><tr><th align="center">迭代轮数\数据集F1</th><th align="center">验证集F1</th><th align="center">测试集F1</th></tr></thead><tbody><tr><td align="center">第一轮</td><td align="center">0.33285302</td><td align="center">0.39347826</td></tr><tr><td align="center">第二轮</td><td align="center">0.56746765</td><td align="center">0.60915032</td></tr><tr><td align="center">第三轮</td><td align="center">0.64367816</td><td align="center">0.67919463</td></tr><tr><td align="center">第四轮</td><td align="center">0.66021297</td><td align="center">0.69376693</td></tr><tr><td align="center">第五轮</td><td align="center">0.66213592</td><td align="center">0.69553450</td></tr><tr><td align="center">第六轮</td><td align="center">0.67054263</td><td align="center">0.70175438</td></tr><tr><td align="center">第七轮</td><td align="center">0.67054263</td><td align="center">0.70175438</td></tr><tr><td align="center">第八轮</td><td align="center">0.67054263</td><td align="center">0.70175438</td></tr></tbody></table><p>分析：通过批量梯度下降的方法往往通过较少次数的迭代学习便可学到较好模型参数，但也与学习率$\alpha$有关，$\alpha$选取较小时，往往需要较多次数的迭代。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> 知识工程课程 </category>
          
          <category> 作业一 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命名实体识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习</title>
      <link href="/Mybatis%E5%AD%A6%E4%B9%A0/"/>
      <url>/Mybatis%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis框架"><a href="#Mybatis框架" class="headerlink" title="Mybatis框架"></a>Mybatis框架</h1><p>本文用于记录初学Mybatis框架过程中的知识点，主要依据Mybatis官方手册及B站的学习资源</p><a id="more"></a><h2 id="一、Mybatis简介"><a href="#一、Mybatis简介" class="headerlink" title="一、Mybatis简介"></a>一、Mybatis简介</h2><h3 id="1-1Mybatis历史"><a href="#1-1Mybatis历史" class="headerlink" title="1.1Mybatis历史"></a>1.1Mybatis历史</h3><ol><li>Mybatis是Apache的一个开源项目iBatis,2010年6月迁移到Google Code，iBatis3.x随之更名为Mybatis。</li><li>iBatis一词源于”internet”和”abatis”的组合，是一个基于java的持久层框架。iBatis提供的持久层框架包括SQL Maps 和Data Access Object(DAO)</li></ol><h3 id="1-2Mybatis简介"><a href="#1-2Mybatis简介" class="headerlink" title="1.2Mybatis简介"></a>1.2Mybatis简介</h3><ol><li>Mybatis是支持定制化SQL、存储过程以及高级映射的优秀的持久层框架</li><li>Mybatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集</li><li>Mybatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Object，普通的java对象）映射成数据库中的记录。</li></ol><h3 id="1-3Mybatis特点"><a href="#1-3Mybatis特点" class="headerlink" title="1.3Mybatis特点"></a>1.3Mybatis特点</h3><ol><li>核心sql代码可以自己优化</li><li>sql和Java编码分离，一个专注业务，一个专注数据</li></ol><h3 id="1-4安装"><a href="#1-4安装" class="headerlink" title="1.4安装"></a>1.4安装</h3><p>要使用 MyBatis， 只需将 mybatis-x.x.x.jar 文件置于<strong>类路径</strong>（classpath）中即可。如果使用 Maven 来构建项目，则需将下面的依赖代码置于 pom.xml 文件中：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;x.x.x&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="二、Mybatis快速使用"><a href="#二、Mybatis快速使用" class="headerlink" title="二、Mybatis快速使用"></a>二、Mybatis快速使用</h2><h3 id="2-1开发环境准备"><a href="#2-1开发环境准备" class="headerlink" title="2.1开发环境准备"></a>2.1开发环境准备</h3><p>在maven中添加依赖</p><h3 id="2-2创建测试表"><a href="#2-2创建测试表" class="headerlink" title="2.2创建测试表"></a>2.2创建测试表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> test_mybatis;</span><br><span class="line"><span class="comment"># 使用库</span></span><br><span class="line"><span class="keyword">USE</span> test_mybatis</span><br><span class="line"><span class="comment"># 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">table</span> tbl_employee(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">11</span>) primary <span class="keyword">key</span> Auto_Increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-3创建javaBean"><a href="#2-3创建javaBean" class="headerlink" title="2.3创建javaBean"></a>2.3创建javaBean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3创建Mybatis全局配置文件"><a href="#2-3创建Mybatis全局配置文件" class="headerlink" title="2.3创建Mybatis全局配置文件"></a>2.3创建Mybatis全局配置文件</h3><p>参考Mybatis官方手册：<a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">Mybatis-quickStart</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"Employee.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4创建Mybatis的SQL映射文件-Mapper映射文件"><a href="#2-4创建Mybatis的SQL映射文件-Mapper映射文件" class="headerlink" title="2.4创建Mybatis的SQL映射文件(Mapper映射文件)"></a>2.4创建Mybatis的SQL映射文件(Mapper映射文件)</h3><p>参考Mybatis官方手册：<a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">Mybatis-quickStart</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace指定绑定的映射器类（接口）的全类名（全限定名） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.edu.bit.mybatis.mapper.EmployeeMapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectEmployee"</span> <span class="attr">resultType</span>=<span class="string">"cn.edu.bit.mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">    select * from tbl_employee where id = #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5测试"><a href="#2-5测试" class="headerlink" title="2.5测试"></a>2.5测试</h3><p>参考Mybatis官方手册：<a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">Mybatis-quickStart</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String resource = <span class="string">"mybatis-config.xml"</span>; <span class="comment">//mabtis全局配置文件位置</span></span><br><span class="line">InputStream inputStream = Resource.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder.build(inputStream);<span class="comment">//通过SqlSessionFactoryBuilder的build()获取SqlSessionFactory的一个实例</span></span><br><span class="line"></span><br><span class="line">SqlSession session = sqlSessionFactory.openSession()<span class="comment">//通过sqlSessionFactory的openSession()获取sqlSession实例，sqlSession实例可执行所有的增删改查数据库的方法</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//使用映射器类mapper接口操作</span></span><br><span class="line">EmployeeMapper mapper = session.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Employee employee = mapper.selectEmployee(<span class="number">10</span>)</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6基于Mapper接口"><a href="#2-6基于Mapper接口" class="headerlink" title="2.6基于Mapper接口"></a>2.6基于Mapper接口</h3><ol><li><p><strong>编写Mapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">selectEmployee</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>完成两个绑定</strong></p><ol><li><strong>Mapper接口与Mapper映射文件(.xml)的绑定</strong>。在Mapper映射文件中的&lt;mapper&gt;标签中的namespace必须指定为Mapper接口的全类名.</li><li>Mapper映射文件中的增删查改标签的id必须指定成Mapper接口中的方法名。</li><li>获取接口的<strong>代理实现对象</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String resource = <span class="string">"mybatis-config.xml"</span>; <span class="comment">//mabtis全局配置文件位置</span></span><br><span class="line">    InputStream inputStream = Resource.getResourceAsStream(resource);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder.build(inputStream);<span class="comment">//通过SqlSessionFactoryBuilder的build()获取SqlSessionFactory的一个实例</span></span><br><span class="line"></span><br><span class="line">    SqlSession session = sqlSessionFactory.openSession()<span class="comment">//通过sqlSessionFactory的openSession()获取sqlSession实例，sqlSession实例可执行所有的增删改查数据库的方法</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//使用映射器类mapper接口操作</span></span><br><span class="line">        EmployeeMapper mapper = session.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Employee employee = mapper.selectEmployee(<span class="number">10</span>)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        session.close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="三、Mybatis全局配置文件"><a href="#三、Mybatis全局配置文件" class="headerlink" title="三、Mybatis全局配置文件"></a>三、Mybatis全局配置文件</h2><h3 id="3-1Mybatis全局配置文件简介"><a href="#3-1Mybatis全局配置文件简介" class="headerlink" title="3.1Mybatis全局配置文件简介"></a>3.1Mybatis全局配置文件简介</h3><ol><li>Mybatis的配置文件包含了影响Mybatis行为甚深的设置(settings)和属性(properties)信息。</li><li>文件结构如下：<blockquote><p>configuration 配置</p><pre><code>properties 属性settings 设置typeAliases 类型命名typeHandlers 类型处理器objectFactory 对象工厂plugins 插件environments 环境    environment 环境变量        transactionManager 事务管理器        dataSource 数据源databaseIdProvider 数据库厂商标识mappers 映射器</code></pre></blockquote></li></ol><h3 id="3-2-properties属性"><a href="#3-2-properties属性" class="headerlink" title="3.2 properties属性"></a>3.2 properties属性</h3><ol><li>既可外部配置也可动态替换的，既可以在典型的Java属性文件(.properties)中配置，也可通过properties元素的子元素配置</li></ol><p>在类路径下创建一个资源文件，名为dbconfig.properties,通过键值对(key=value)的方式放置，不加其他字符，一条占一行</p><blockquote><p>jdbc.driver=com.mysql.jdbc.Driver<br>jdbc.url=jdbc:mysql://localhost:3306/test_mybatis<br>jdbc.username=root<br>jdbc.password=xxxxxx<br>然后在Mybatis全局配置文件中引入外部资源文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- resource: 从类路径下引入</span></span><br><span class="line"><span class="comment"> url: 从网络路径或磁盘路径下引入</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"dbconfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值。比如:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"oracle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果一个属性在不只一个地方进行了配置，那么，MyBatis 将按照下面的顺序来加载：</p><blockquote><ol><li>首先读取在 properties 元素体内指定的属性。</li><li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路 径读取属性文件，并覆盖之前读取过的同名属性。</li><li>最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。</li></ol></blockquote><blockquote><p>因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的则是 properties 元素中指定的属性。</p></blockquote><h3 id="settings设置"><a href="#settings设置" class="headerlink" title="settings设置"></a>settings设置</h3><ol><li>这是Mybatis极为重要的调整设置，会改变Mybatis的运行时行为</li><li>一个完整的settings元素配置实例如下：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"multipleResultSetsEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingBehavior"</span> <span class="attr">value</span>=<span class="string">"PARTIAL"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingUnknownColumnBehavior"</span> <span class="attr">value</span>=<span class="string">"WARNING"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"SIMPLE"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"25"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultFetchSize"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"safeRowBoundsEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"OTHER"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">"equals,clone,hashCode,toString"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>较常用的settings设置<table><thead><tr><th align="left">设置名</th><th align="left">描述</th><th align="left">有效值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">mapUnderscoreToCamelCase</td><td align="left">是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td align="left">true false</td><td align="left">False</td></tr></tbody></table></li></ol><h3 id="typeAliases类型别名处理"><a href="#typeAliases类型别名处理" class="headerlink" title="typeAliases类型别名处理"></a>typeAliases类型别名处理</h3><ol><li>类型别名是为Java类的全限定名设置一个短的名字，可以方便的引用某个类。通常情况下，都是批量将一个包下的类起别名，就是简单类名小写<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单独给某个类起别名</span></span><br><span class="line"><span class="comment">&lt;typeAliases&gt;</span></span><br><span class="line"><span class="comment">&lt;typeAlias type="类的全限定名" alias="别名"/&gt;</span></span><br><span class="line"><span class="comment">&lt;/typeAliases&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.edu.bit.mybatis.bean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="typeHandlers类型处理器"><a href="#typeHandlers类型处理器" class="headerlink" title="typeHandlers类型处理器"></a>typeHandlers类型处理器</h3><ol><li>MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。<br>（此块暂不深究)</li></ol><h3 id="plugins插件"><a href="#plugins插件" class="headerlink" title="plugins插件"></a>plugins插件</h3><p>MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><ol><li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li><li>ParameterHandler (getParameterObject, setParameters)</li><li>ResultSetHandler (handleResultSets, handleOutputParameters)</li><li>StatementHandler (prepare, parameterize, batch, update, query)</li></ol><p>这些类中方法的细节可以通过查看每个方法的签名来发现，或者直接查看 MyBatis 发行包中的源代码。 如果你想做的不仅仅是监控方法的调用，那么你最好相当了解要重写的方法的行为。 因为在试图修改或重写已有方法的行为时，很可能会破坏 MyBatis 的核心模块。 这些都是更底层的类和方法，所以使用插件的时候要特别当心。</p><p>通过 MyBatis 提供的强大机制，使用插件是非常简单的，只需<strong>实现 Interceptor 接口</strong>，并<strong>指定想要拦截的方法签名</strong>即可。（此例来自于Mybatis官网）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ExamplePlugin.java</span></span><br><span class="line"><span class="comment">//注解指定所拦截的方法签名</span></span><br><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(</span><br><span class="line">  type= Executor<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">  <span class="title">method</span> </span>= <span class="string">"update"</span>,</span><br><span class="line">  args = &#123;MappedStatement<span class="class">.<span class="keyword">class</span>,<span class="title">Object</span>.<span class="title">class</span>&#125;)&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ExamplePlugin</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="comment">// implement pre processing if need</span></span><br><span class="line">    Object returnObject = invocation.proceed();</span><br><span class="line">    <span class="comment">// implement post processing if need</span></span><br><span class="line">    <span class="keyword">return</span> returnObject;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.properties = properties;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-config.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"org.mybatis.example.ExamplePlugin"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"someProperty"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的插件将会拦截在 Executor 实例中所有的 “update” 方法调用， 这里的 Executor 是负责执行底层映射语句的内部对象。</p><h3 id="environments环境设置"><a href="#environments环境设置" class="headerlink" title="environments环境设置"></a>environments环境设置</h3><ol><li><ol><li>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。</li><li>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</li><li>所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推，记起来很简单： </li></ol></li><li>每种环境使用一个environment标签进行配置</li><li>可以通过environments标签中的defualt属性指定一个环境的标识符来快速的切换环境</li><li>environment指定具体环境  id:指定当前环境的唯一标识 必须配置transactionManager和dataSource属性<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"..."</span> <span class="attr">value</span>=<span class="string">"..."</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"oracle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"..."</span> <span class="attr">value</span>=<span class="string">"..."</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>实际过程中用Spring管理数据源和事务控制。</li></ol><h3 id="数据库厂商标识"><a href="#数据库厂商标识" class="headerlink" title="数据库厂商标识"></a>数据库厂商标识</h3><h3 id="mappers映射器"><a href="#mappers映射器" class="headerlink" title="mappers映射器"></a>mappers映射器</h3><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 file:/// 形式的 URL），或类名和包名等。</p><ol><li>用来在mybatis初始化时，告诉mybatis需要引入哪些Mapper映射文件</li><li>mapper逐个注册SQL映射文件<blockquote><p>resource: 引入类路径下的文件（通常使用）<br>url: 引入网络路径或磁盘路径下的文件<br>class: 引入Mapper接口。有SQL映射文件：要求与Mapper接口同名同位置</p><pre><code>没有AQL映射文件：使用注解在接口方法上写SQL语句</code></pre></blockquote></li></ol><h2 id="四、Mybatis映射文件"><a href="#四、Mybatis映射文件" class="headerlink" title="四、Mybatis映射文件"></a>四、Mybatis映射文件</h2><h3 id="4-1Mybatis映射文件简介"><a href="#4-1Mybatis映射文件简介" class="headerlink" title="4.1Mybatis映射文件简介"></a>4.1Mybatis映射文件简介</h3><ol><li><p>MyBatis 的真正强大在于它的语句映射，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码。MyBatis 致力于减少使用成本，让用户能更专注于 SQL 代码。</p></li><li><p>SQL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：</p><blockquote><p>cache – 该命名空间的缓存配置。<br>cache-ref – 引用其它命名空间的缓存配置。<br><strong>resultMap</strong> – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。<br>parameterMap – <del>老式风格的参数映射。此元素已被废弃，并可能在将来被移除！请使用行内参 数映射。这里不会介绍此元素</del>。<br><strong>sql</strong>   – 可被其它语句引用的可重用语句块。<br>insert – 映射插入语句。<br>update – 映射更新语句。<br>delete – 映射删除语句。<br>select – 映射查询语句。</p></blockquote></li></ol><h3 id="4-2-insert-update-delete-select"><a href="#4-2-insert-update-delete-select" class="headerlink" title="4.2 insert|update|delete|select"></a>4.2 insert|update|delete|select</h3><ol><li>select<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mapper 接口方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmployeeById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmployeeById"</span> <span class="attr">resultType</span>=<span class="string">"cn.edu.bit.bean.Employee"</span>&gt;</span></span><br><span class="line">select * from tbl_employee where id = $&#123;_parameter&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>insert<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mapper接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">insertEmployee</span><span class="params">(Employee employee)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertEmployee"</span> <span class="attr">parameterType</span>=<span class="string">"cn.edu.bit.bean.Employee"</span>&gt;</span></span><br><span class="line">insert into tbl_employee(id, name) values(#&#123;id&#125;, #&#123;name&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>update<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mapper接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">updateEmployee</span><span class="params">(Employee employee)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateEmployee"</span> <span class="attr">parameterType</span>=<span class="string">"cn.edu.bit.bean.Employee"</span>&gt;</span></span><br><span class="line">update tbl_employee set name = #&#123;name&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>delete<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mapper接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmployeeById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteEmployeeById"</span>&gt;</span></span><br><span class="line">delete from tbl_employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="4-3主键"><a href="#4-3主键" class="headerlink" title="4.3主键"></a>4.3主键</h3><p>如果你的数据库支持自动生成主键的字段（比如 MySQL 和 SQL Server），那么你可以设置 useGeneratedKeys=”true”，然后再把 keyProperty 设置为目标属性就 OK 了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertEmployee"</span> <span class="attr">parameterType</span>=<span class="string">"cn.edu.bit.bean.Employee"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">insert into tbl_employee(name) values(#&#123;name&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4参数传递"><a href="#4-4参数传递" class="headerlink" title="4.4参数传递"></a>4.4参数传递</h3><p>参数的获取方式：</p><ol><li>#{key}: 获取参数的值，预编译到SQL中，安全。</li><li>${key}: 获取参数的值，拼接到SQL中，可能存在SQL注入。<br>默认情况下，使用 #{} 参数语法时，MyBatis 会创建 PreparedStatement 参数占位符，并通过占位符安全地设置参数（就像使用 ? 一样）。</li></ol><h3 id="4-5-resultType自动映射"><a href="#4-5-resultType自动映射" class="headerlink" title="4.5 resultType自动映射"></a>4.5 resultType自动映射</h3><ol><li>autoMappingBehavior默认是PARTIAL（如果为null，会取消自动映射）,开启自动映射的功能。唯一的要求是列名和javabean属性名一致。</li><li>数据库字段命名规范，POJO属性符合驼峰命名法，如：A_COLUMN  aColumn,因此需将settings下的mapUnderscoreToCamelCase=true</li></ol><h3 id="4-6-resultMap-自定义结果映射"><a href="#4-6-resultMap-自定义结果映射" class="headerlink" title="4.6 resultMap 自定义结果映射"></a>4.6 resultMap 自定义结果映射</h3><ol><li>自定义resultMap，实现高级结果映射</li><li>id: 用于完成主键值的映射</li><li>result: 用于完成普通列的映射</li><li>association: 复杂类型映射</li><li>connection: 集合类型映射<br>例如：实现员工表和部门表的联合查询，员工对象<strong>有一个(通常使用association)</strong>部门对象<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"WithDeptResultMap"</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"cn.edu.bit.crud.bean.Employee"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- column对应数据库中属性， property对应POJO中的字段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"emp_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"empId"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"emp_name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"empName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">jdbcType</span>=<span class="string">"CHAR"</span> <span class="attr">property</span>=<span class="string">"gender"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"email"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dept_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"deptId"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定联合查询出的department成员信息封装 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"department"</span></span></span><br><span class="line"><span class="tag"><span class="attr">javaType</span>=<span class="string">"cn.edu.bit.crud.bean.Department"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"dept_id"</span> <span class="attr">property</span>=<span class="string">"deptId"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dept_name"</span> <span class="attr">property</span>=<span class="string">"deptName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="五、动态SQL"><a href="#五、动态SQL" class="headerlink" title="五、动态SQL"></a>五、动态SQL</h2><h2 id="六、MyBatis逆向工程"><a href="#六、MyBatis逆向工程" class="headerlink" title="六、MyBatis逆向工程"></a>六、MyBatis逆向工程</h2><h3 id="6-1-逆向工程简介"><a href="#6-1-逆向工程简介" class="headerlink" title="6.1 逆向工程简介"></a>6.1 逆向工程简介</h3><p>MyBatis Generator: 简称MBG，是一个专门为MyBatis框架使用者定制的代码生成器，可以快速的根据表生成对应的Mapper映射文件、Mapper映射器接口，以及javabean类。支持基本得增删改查以及QBC风格的条件查询。但是<strong>表连接、存储过程等复杂的sql定义需要手工编写</strong>。</p><h3 id="6-2-逆向工程的配置"><a href="#6-2-逆向工程的配置" class="headerlink" title="6.2 逆向工程的配置"></a>6.2 逆向工程的配置</h3><ol><li><p>导入逆向工程的jar包或maven添加相应依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写MBG的配置文件(重要几处配置)，具体可参照[官网手册][<a href="http://mybatis.org/generator/quickstart.html]" target="_blank" rel="noopener">http://mybatis.org/generator/quickstart.html]</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    targetRuntime: 执行生成的逆向工程版本</span></span><br><span class="line"><span class="comment">    MyBatis3Simple:生成基本的CRUD</span></span><br><span class="line"><span class="comment">    MyBatis3:生成带条件的CRUD</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"simple"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/mbg_test"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">password</span>=<span class="string">"xxxxxx"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- javabean的生成策略</span></span><br><span class="line"><span class="comment">targetPackage：生成javabean的位置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.edu.bit.mbg.beans"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- sql映射文件的生成策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"example.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mapper接口的生成策略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"cn.edu.bit.crud.dao"</span> <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 逆向分析的表 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"tbl_emp"</span> <span class="attr">domainObjectName</span>=<span class="string">"Employee"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>逆向生成器测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMbg</span><span class="params">()</span> <span class="keyword">throws</span> Exceptionn </span>&#123;</span><br><span class="line">List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"> <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line"> File configFile = <span class="keyword">new</span> File(<span class="string">"mbg.xml"</span>);<span class="comment">//mbg配置文件</span></span><br><span class="line"> ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line"> Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line"> DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line"> MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line"> myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="七、ssm整合（概述）"><a href="#七、ssm整合（概述）" class="headerlink" title="七、ssm整合（概述）"></a>七、ssm整合（概述）</h2><ol><li>搭建环境</li><li>spring + springMVC</li><li><blockquote><p>在web.xml中配置：springMVC的前端控制器，实例化spring容器的监听器，字符编码过滤器，REST过滤器<br>创建spring的配置文件：applicationContext.xml:组件扫描、连接池、事务……<br>创建springMVC配置文件：springmvc.xml: 组件扫描、视图解析器……</p></blockquote></li><li>mybatis逆向工程配置</li><li>spring + mybatis: mybatis的sqlSession的创建，mapper接口的代理实现类</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 框架 </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda安装pytorch</title>
      <link href="/conda%E5%AE%89%E8%A3%85pytorch/"/>
      <url>/conda%E5%AE%89%E8%A3%85pytorch/</url>
      
        <content type="html"><![CDATA[<h1 id="conda安装pytorch"><a href="#conda安装pytorch" class="headerlink" title="conda安装pytorch"></a>conda安装pytorch</h1><p>因课程学习需要，刚刚开始接触pytorch,因此本文仅简单讲述如何通过conda安装pytorch，记录自己安装操作过程，并不对pytorch过多介绍，若后期对其深入一二，可能会写一篇文章简单记录学习看法。</p><a id="more"></a><h3 id="一、前提：已安装anaconda，了解基本操作"><a href="#一、前提：已安装anaconda，了解基本操作" class="headerlink" title="一、前提：已安装anaconda，了解基本操作"></a>一、前提：已安装anaconda，了解基本操作</h3><p>基于Anaconda可以便捷地获取包并对包进行管理。若尚未安装可参照该文进行安装配置：<a href="https://xuzf-git.github.io/posts/55263.html" target="_blank" rel="noopener">安装Anaconda &amp; conda指令入门 - xuzf</a></p><h3 id="二、安装过程"><a href="#二、安装过程" class="headerlink" title="二、安装过程"></a>二、安装过程</h3><ol><li>在确保安装好anaconda且添加好镜像(详情见上文推荐博客)之后，先进入其官网转转：<a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener">pytorch官网get-start</a><br><img src="/img/pytorchlearning/start/install.png" alt="get-start"></li><li>为避免框架之间包冲突，因此先创建一个虚拟环境，在此环境下进行后续操作<blockquote><p>创建环境：conda create -name env_name python=3.7  (env_name替换为自己的环境名)<br>进入环境：conda activate env_name</p></blockquote></li><li>安装gpu版pytorch<blockquote><p>安装指令：conda install pytorch torchvision cudatoolkit<br>注：不要按照官网指令后面加：-c pytorch，否则无法用到镜像源<br>此步过程中可能较多次出现如下问题：<br><img src="/img/pytorchlearning/start/error.png" alt="error"><br>保持耐心，多次尝试！</p></blockquote></li><li>安装成功后，进行测试<br><img src="/img/pytorchlearning/start/test.png" alt="test"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> pytorch安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务-系统恢复-并发控制</title>
      <link href="/%E4%BA%8B%E5%8A%A1-%E7%B3%BB%E7%BB%9F%E6%81%A2%E5%A4%8D-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
      <url>/%E4%BA%8B%E5%8A%A1-%E7%B3%BB%E7%BB%9F%E6%81%A2%E5%A4%8D-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>本文用以记录数据库概念专业课学习过程中事务，系统恢复，并发控制章节中的重要概念</p><a id="more"></a><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="一、事物的概念："><a href="#一、事物的概念：" class="headerlink" title="一、事物的概念："></a>一、事物的概念：</h3><blockquote><p>事务是构成单一逻辑工作单元的操作的集合。比如：将钱从一个账户转到另一个帐户就是一个事务，该事务包括分别对两个庄户的更新操作。</p></blockquote><h3 id="二、事务的特性（ACID）"><a href="#二、事务的特性（ACID）" class="headerlink" title="二、事务的特性（ACID）"></a>二、事务的特性（ACID）</h3><blockquote><ol><li>原子性(Atomicity)：事务是不可分的。事务的所有动作要么全部执行，要么由于出错而撤销事务的影响。</li><li>一致性(consistency)：事务产生的结果只能使数据库从一个状态转移到另一状态且保持一致。即当事务成功提交时，保存一致性结果。而当事务尚未完成就中断时，应回滚事务部分操作对数据库的影响。</li><li>隔离性(isolation)：事务的隔离性是指一个事务的执行不能影响到另一个事务，即一个事务的内部操作相对于外部事务是隔离的。</li><li>持久性(durability)：一个事务成功完成后，他对数据库的修改必须是永久的，即使出现系统故障。</li></ol></blockquote><h3 id="三、事务的状态"><a href="#三、事务的状态" class="headerlink" title="三、事务的状态"></a>三、事务的状态</h3><blockquote><ol><li>活跃的(active)：初始状态，事务执行过程中处于这个状态。</li><li>部分提交(partially committed)：事务的最后一条语句执行后。此时，事务中对数据的操作已经全部完成，但结果数据还驻留在内存中。因此，如果在此状态时，系统出现故障仍可能使事务不得不终止</li><li>失败的(failed)：如果事务不能正常执行，事务就进入失败状态。这意味着事务没有成功地完成，必须回滚。回滚（Rollback）就是撤消事务已经做出任何数据更改。一旦事务造成的所有更改被撤消，我们就说事务已回滚。</li><li>中止的(aborted)：事务回滚并且数据库已经恢复到事务执行前的状态。</li><li>提交状态(committed)： 事务成功完成后。向日志记录中写入一条事务日志信息，并将事务对数据的更改完全写入磁盘时，标志着事务成功完成，这时事务就进入了提交状态。事务成功执行之后，更新结果转存到永久存储器上，因此，事务一旦提交，即使出现了故障，事务所做的数据更新也能在系统重新启动后恢复。</li></ol><pre class="mermaid">> graph LRA(活跃状态) -->B(部分提交状态)A(活跃状态) -->C(失败状态)B(部分提交状态) -->C(失败状态)B(部分提交状态) -->D(提交状态)C(失败状态) -->E(中止状态)</pre></blockquote><h2 id="恢复系统"><a href="#恢复系统" class="headerlink" title="恢复系统"></a>恢复系统</h2><h3 id="四、故障分类"><a href="#四、故障分类" class="headerlink" title="四、故障分类"></a>四、故障分类</h3><blockquote><ul><li>事务故障：有两种错误可能造成事务执行失败。<ol><li>逻辑错误：事务由于内部条件而无法正常执行。如非法输入，超出资源等。如在转账事务中需要将一笔金额由一个账户转入另一个账户，但在操作过程中发现余额不够，不能转出。这种情况可由应用程序安排一个ROLLBACK中止事务的执行。该类错误由程序自身解决。</li><li>系统错误：系统进入一种不良状态（如死锁），事务无法继续执行。由系统处理。</li></ol></li><li>系统崩溃：系统故障是指造成系统停止运行的任何事件，如硬件故障、操作系统或DBMS故障、突然停电等。这些情况发生时，正在执行着的所有事务将突然中断，导致内存中保留的事务数据都被丢失，数据可能处在不一致的状态。</li><li>磁盘故障：存储设备故障主要指辅助存储的介质受到破坏，如磁盘的磁头碰撞使部分磁介质损坏等。这类故障不但影响活动着的所有事务，而且使被损坏介质的数据丢失，数据库遭到严重破坏。</li></ul></blockquote><h3 id="五、数据库恢复技术"><a href="#五、数据库恢复技术" class="headerlink" title="五、数据库恢复技术"></a>五、数据库恢复技术</h3><ol><li>基本原理：建冗余数据，即利用存储在系统其他地方（与数据分离）的冗余数据来实现恢复。</li></ol><blockquote><p><strong>建立冗余数据的常用技术：</strong></p><ul><li>数据转储</li><li>记录日志文件</li></ul></blockquote><ol start="2"><li><p>数据转储：DBA定期地将整个数据库复制到磁带或另一个磁盘上作为备份保存。</p><ul><li>转储方式：<ul><li>静态转储与动态转储</li><li>海量转储与增量转储</li></ul></li></ul></li><li><p>基于日志的数据库恢复：在修改数据库本身之前，首先向稳定存储器中输入修改描述信息，再执行修改操作，以确保已提交事务的修改能永久存储，中止的事务可回滚。<strong>日志记录技术要保证先写日志，再修改数据</strong></p></li></ol><blockquote><ol><li>日志记录的基本格式：</li></ol><ul><li>事务标识(T<del>i</del>)：执行写操作事务的唯一标识</li><li>数据项标识(X<del>j</del>)：所写数据项的唯一标识。通常是数据项在磁盘上的位置，包括数据项所驻留的块的块标识及块内偏移量。</li><li>旧值(V<del>1</del>)：数据项的写前值。</li><li>新值(V<del>2</del>)：数据项的写后值。<br>一般表示未&lt;T<del>i</del>, X<del>j</del>, V<del>1</del>,  V<del>2</del>&gt;。<br>&lt;T<del>i</del> start&gt; 事务T<del>i</del>开始。<br>&lt;T<del>i</del> commit&gt; 事务T<del>i</del>提交，表示事务对数据库的所有修改已提交到缓冲区，不能确定是否更新了磁盘。<br>&lt;T<del>i</del> abort&gt; 事务T<del>i</del>中止。</li></ul><ol start="2"><li>基于日志的恢复技术：<ol start="3"><li>redo：对于已提交的写操作，当系统发生故障崩溃时，用redo重做事务，恢复已完成的事务。</li><li>undo：对于修改了数据库但未提交的事务，利用undo撤销事务的影响。</li></ol></li></ol></blockquote><h3 id="六、检查点恢复技术"><a href="#六、检查点恢复技术" class="headerlink" title="六、检查点恢复技术"></a>六、检查点恢复技术</h3><ol><li><p>检查点的引入：为减少日志记录的搜索规模并减少重复的redo操作，引入检查点技术，即在日志文件中加一个表示数据库是否正常运行的标识。<strong>检查点写入时保证（1）此时不允许有任何更新操作（2）将所有更新过的缓冲块写入磁盘(保证检查点之前已提交的事务已写入磁盘，中止事务已回滚)</strong></p></li><li><p>写入检查点：</p><blockquote><p>检查点记录内容：</p><ol><li>建立检查点时刻所有正在执行的事务清单（以&lt;T<del>i</del> commit&gt;, &lt;T<del>i</del> abort&gt;作为执行完成标识）</li><li>这些事务最近一个日志记录的地址</li></ol></blockquote></li><li><p>检查点的执行过程：</p><blockquote><ol><li>将当前位于主存的所有日志记录输出到稳定存储器。</li><li>将所有修改操作结果的缓冲块写入磁盘</li><li>将一个日志记录&lt;checkpoint L&gt;写入稳定存储器，L是建立检查点时刻所有正在执行的事务清单<ol start="4"><li>将检查点记录在日志文件中的地址写入重启动文件。</li></ol></li></ol></blockquote></li><li><p>利用价差点的恢复步骤：</p><blockquote><ol><li>在重启动文件中找到最后一个检查点记录</li><li>将检查点时刻事务清单中的事务暂时 放到undo队列。</li><li>从检查点开始正向扫描日志文件，<ul><li>若有新开始的事务，暂时放入Undo队列。</li><li>若有提交事务T<del>j</del>，把T<del>j</del>从Undo队列移到redo队列</li></ul></li><li>反向扫描日志文件对undo队列中的事务进行undo</li><li>再次正向扫描，对redo 队列中的事务进行redo</li></ol></blockquote></li></ol><h3 id="七、数据库的镜像恢复技术（涉及负载均衡，主从复制等后期补充）"><a href="#七、数据库的镜像恢复技术（涉及负载均衡，主从复制等后期补充）" class="headerlink" title="七、数据库的镜像恢复技术（涉及负载均衡，主从复制等后期补充）"></a>七、数据库的镜像恢复技术（涉及负载均衡，主从复制等后期补充）</h3><ol><li>概念：为预防介质故障，DBA周期性地转储数据库。</li><li>使用：</li></ol><blockquote><ol><li>出现介质故障：<ul><li>可由镜像磁盘继续提供使用</li><li>同时DBMS自动利用镜像磁盘数据进行数据库恢复</li></ul></li><li>未出现故障时<ul><li>主从复制、读写分离：对于并发操作，一个用户对数据库加排他锁，其他用户可对镜像进行读取操作，提高并发性</li><li>负载均衡</li></ul></li></ol></blockquote><h2 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h2><h3 id="八、并发操作带来的数据不一致性："><a href="#八、并发操作带来的数据不一致性：" class="headerlink" title="八、并发操作带来的数据不一致性："></a>八、并发操作带来的数据不一致性：</h3><ol><li>丢失更新：事务1和事务2从数据库读入同一数据并先后修改，后提交的事务结果破坏了先提交事务的更新结果，导致先提交事务的修改丢失。</li><li>读“脏”数据：事务1修改了某一数据，但还未提交，此时事务2读到了事务1所修改的数据，后续事务1可能因为某种原因被撤销，事务1回滚，则事务2读到的就是与数据库中不一致的数据，称为脏读。</li><li>不可重复读（包括幻象读）：在事务执行过程中，事务1读取某一数据后，事务2对同一数据执行更新操作并且完成提交，使得事务1再次读取该数据时，发现与前一次所读不同，称之为不可重复读。若事务2执行的是插入或删除操作，会使事务1前后两次读出的数据数量不同，称之为幻象读。</li></ol><p>数据库的事务隔离级别</p><table><thead><tr><th align="left">隔离级别</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">读未提交(READ UNCOMMIT)</td><td align="left">允许事务读取其他事务未提交的数据，<strong>脏读、不可重复读、幻象读都会出现</strong></td></tr><tr><td align="left">读已提交(READ COMMITED)</td><td align="left">只允许事务读取其他事务已提交的数据，可避免<strong>脏读</strong>，会出现不可重复读和幻读现象，也是大多数数据库的默认隔离级别，mysql不是</td></tr><tr><td align="left">可重复读(REPEATABLE READ)</td><td align="left">确保某一事务多次读取同一数据结果相同（其他事务不可update该数据），但未解决幻读现象（其他事务可insert），Mysql的默认隔离级别</td></tr><tr><td align="left">可串行化(SERIALIZABLE)</td><td align="left">强制所有事务串行执行，在这个事务持续期间，禁止其他事务对该表执行插入、更新、删除操作，所有并发问题都可以避免，但并发性能十分低下。</td></tr></tbody></table><h3 id="数据不一致性的解决方案："><a href="#数据不一致性的解决方案：" class="headerlink" title="数据不一致性的解决方案："></a>数据不一致性的解决方案：</h3><ol><li>基于锁的协议</li><li>基于时间戳协议</li><li>基于有效性检查的协议</li><li>多版本并发控制</li><li>快照隔离</li></ol><h4 id="基于锁的协议："><a href="#基于锁的协议：" class="headerlink" title="基于锁的协议："></a>基于锁的协议：</h4><ol><li><p>概念：确保隔离性（并发事务的可串行化技术），实际上遵循了一种约束：当一个事务访问某个数据项时，其他任何事务都不能修改这个数据项，实现该约束的最常用方法就是只允许事务访问该事务当前持有锁的数据项。</p></li><li><p>锁的分类</p><ol><li>基本锁的分类：</li></ol><blockquote><ol><li>共享锁（Share lock, S锁、读锁）：若事务T对数据对象A加上S锁，则其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。<strong>保证其他事务可以获得对象A的S锁读取A，但不可对A修改，直到A上无S锁，事务才可对A加X锁，更新A</strong></li><li>排他锁（eXclusive lock，X锁，写锁）：若事务T对数据项A加X锁，则只允许T读取和修改A，其他事务不能再对A加任何类型的锁。</li></ol></blockquote><ol start="2"><li>封锁协议：运用封锁方法进行并发控制时，对数据对象加锁时需要约定的规则。</li></ol><blockquote><p>何时申请锁<br>持锁时间<br>何时释放锁<br>封锁协议分类：</p></blockquote><ol><li>一级封锁协议：事务T在修改数据A前必须先对其加X锁，直到事务结束才释放，不会<strong>丢失修改</strong>，但在<strong>读数据时不加锁</strong>，会产生脏读和不可重复读。</li><li>二级封锁协议：在一级封锁协议基础上，事务T在读取数据A之前必须先对其加S锁，<strong>读完即可释放S锁</strong>，可防止脏读，但不能避免不可重复读。</li><li>三级封锁协议：在二级封锁协议的基础上，S锁要保持到该事务结束才释放。</li><li>两阶段封锁协议：最常用的封锁协议。理论上可以证明两阶段锁协议产生的是可串行化调度。两阶段封锁是指事务必须分两个阶段对数据项加锁和解锁。</li></ol><blockquote><p>第一阶段是获得锁，也称扩展阶段：这个阶段事务可以<strong>申请</strong>获得任何数据项上的任何类型    的锁，但不可释放任何锁。<br>第二阶段是释放锁，也称收缩阶段。这个阶段事务可以释放任何数据项上的任何锁，但不可获 得锁。<br>遵循两阶段锁的事务，并行执行的结果一定是正确的，但没有避免死锁（不是一次封锁法） </p></blockquote></li><li><p>死锁：死锁是指同时处在申请锁的等待状态的两个或多个事务相互封锁了对方请求的资源，使得没有任何一个事务能获得足够资源运行完毕，而永远等待下去。<br>预防死锁的方法有：</p><ol><li><p>死锁预防：针对于系统进入死锁状态概率较高的情形</p><ol start="2"><li><p>一次封锁法：在事务开始前将事务可能用到的数据项全部封锁</p></li><li><p>顺序封锁法：预先对数据对象规定一个封锁顺序，事务按改顺序实行封锁</p></li><li><p>使用抢占与事务回滚：基于时间戳决定事务是否回滚以释放另一事务所申请的锁</p></li></ol></li><li><p>死锁的检测与恢复：允许死锁发生，由DBMS定期检查是否产生了死锁，并设法解除。<br>死锁检测方法：</p><ol><li>超时法：如果一个事务等待时间超过了时限则认定为死锁。</li><li>事务等待图法：用一个有向图表示事务间申请锁的等待关系，若存在回路则产生了死锁</li></ol><p>死锁的恢复：选择一个处理死锁代价最小的事务将其回滚</p></li></ol></li></ol><p>. </p>]]></content>
      
      
      <categories>
          
          <category> 数据库课程 </category>
          
          <category> 事务、恢复系统、并发控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库课程学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>explain关键字</title>
      <link href="/explain%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/explain%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>在MySQL中，可以使用<strong><em>explain</em></strong>关键字来获取模拟优化器执行SQL语句的结果，从而知道MySQL是如何执行查询语句的，进而分析查询语句或是表结构的性能瓶颈，方便进行性能优化。</p><a id="more"></a><h1 id="Explain关键字"><a href="#Explain关键字" class="headerlink" title="Explain关键字"></a>Explain关键字</h1><h2 id="语法：-explain-SQL；"><a href="#语法：-explain-SQL；" class="headerlink" title="语法： explain + SQL；"></a>语法： explain + SQL；</h2><p>先上一个demo，留下印象：<br><img src="/img/mysql_learning/explain/explaindemo.png" alt="demo"></p><h2 id="Explain中的列"><a href="#Explain中的列" class="headerlink" title="Explain中的列"></a>Explain中的列</h2><h3 id="一、id列"><a href="#一、id列" class="headerlink" title="一、id列"></a>一、id列</h3><p>总是一组数字，是select查询的序列号，用来标识查询中执行select子句或操作表的顺序。</p><p>情况分析</p><ul><li>id相同时，从上到下顺序执行操作表（mysql的查询计划是左深树）</li><li>id不同时，id值越大越先执行</li><li>当查询语句不含子查询或联合(Union)时id总为1</li><li>当出现子查询时，id会增大<br> <img src="/img/mysql_learning/explain/iddemo.png" alt="id"></li></ul><h3 id="二、select-type"><a href="#二、select-type" class="headerlink" title="二、select_type"></a>二、select_type</h3><p>表示查询类型</p><blockquote><ol><li>SIMPLE:简单的select查询，查询中不包括子查询或union</li><li>PRIMARY:查询中包括任何复杂的子部分，最外层查询被标记为primary</li><li>SUBQUERY:在select或where子句中的子查询</li><li>DERIVED:from子句中的子查询被标记为derived(衍生)，MySQL会递归地执行这些子查询，结果放在临时表</li><li>UNION：出现在UNION后的那个select查询会被标记为UNION</li><li>UNION RESULT:从UNION表获取结果的select</li></ol></blockquote><h3 id="三、table"><a href="#三、table" class="headerlink" title="三、table"></a>三、table</h3><p>表示该查询是关于的那张表</p><h3 id="四、type"><a href="#四、type" class="headerlink" title="四、type"></a>四、type</h3><p>显示查询使用了哪种类型(访问类型)</p><p>常见访问类型效率从最好到最差：system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all<br>一般来说，查询至少到range级别，最好达到ref</p><blockquote><ol><li>system：表中只有一行记录。</li><li>const: 通常是以primary key 或 unique索引作为where子句，且比较条件是键可取值中 的一个常量，通过一次索引便可找到。例如：select * from st where id = 1;</li><li>eq_ref: 这种访问类型，MySQL知道最多只返回一条符合条件的记录。也是以主键或唯一性索引查找，但比较条件不是常量（另一表中的参考值）。</li><li>ref: 用非唯一性索引查找，返回匹配某单个值的所有行。是查找和扫描的混合体。</li><li>range: 范围扫描，即一个限制范围内的索引全扫描，常用于where子句中含between,&gt;,&lt;等范围条件的情况。</li><li>index: 用索引进行的全表扫描。</li><li>all: 全表扫描。</li></ol></blockquote><h3 id="五、possible-keys"><a href="#五、possible-keys" class="headerlink" title="五、possible_keys"></a>五、possible_keys</h3><p>表示查询可能使用到哪些索引，基于查询访问的列(select子句中的字段)和比较操作符来判断的。</p><h3 id="六、key"><a href="#六、key" class="headerlink" title="六、key:"></a>六、key:</h3><p>显示查询使用的索引，如果为null，则未使用索引。若使用覆盖索引<a href="某个复合索引包含select子句中的所有列，则只需根据该索引返回结果，不必再读取数据文件。查询列被所建索引覆盖。不可用select*">^标注</a>，则该索引不会出现在possible_key中。</p><h3 id="七、key-len"><a href="#七、key-len" class="headerlink" title="七、key_len:"></a>七、key_len:</h3><p>表示索引使用的字节数。对于复合索引，key_len可以帮助判断是否充分用上索引，判断多列索引中用到哪些列。</p><h3 id="八、ref"><a href="#八、ref" class="headerlink" title="八、ref:"></a>八、ref:</h3><p>显示了key中索引查找时，作为查找条件用到的列或常量。</p><h3 id="九、rows"><a href="#九、rows" class="headerlink" title="九、rows"></a>九、rows</h3><p>根据表统计信息及索引选用情况，大致估算找到所需记录需要读取的行数。不是结果集行数。</p><h3 id="十、extra"><a href="#十、extra" class="headerlink" title="十、extra:"></a>十、extra:</h3><p>包含不适合出现在其他列的额外重要信息。 </p><blockquote><p>using filesort(避免出现): MySQL对数据使用一个外部的索引排序，而不是按照表内的索引顺序读取。MySQL中无法用索引完成的排序操作成为“文件排序”。（排序的字段未使用到索引）</p><p>using temporary(避免出现): 使用临时表保存中间结果。常见于order by 和 group by。</p><p>using index: select操作使用了覆盖索引，避免了对数据行的操作。效率不错。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
          <category> explain关键字 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基本操作</title>
      <link href="/markdown%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/markdown%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>作为一个markdown初学者，仅以此文作为markdown基本语法实操练习，及发文章的demo。文中涉及了markdown的基本语法，供在源代码模式下记忆练习。  加油！！！</p><a id="more"></a><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="写博客："><a href="#写博客：" class="headerlink" title="写博客："></a>写博客：</h4><pre><code>git bash里输入指令： hexo new &lt;文件名&gt;在_posts里生成新的.md文件，编辑即可hexo g  &amp;&amp;  hexo d </code></pre><h1 id="我也是一级标题"><a href="#我也是一级标题" class="headerlink" title="我也是一级标题"></a>我也是一级标题</h1><h2 id="我是二级标题"><a href="#我是二级标题" class="headerlink" title="我是二级标题"></a>我是二级标题</h2><p><strong>加粗</strong><br><strong>我也是粗体</strong><br><em>斜体</em><br><em>我也是斜体</em><br><strong><em>我也是斜体加粗</em></strong><br><strong><em>斜体加粗</em></strong><br><del>删除线</del><br>==高亮==<br><u>我有下划线</u><br>这里创建了一个关于我的脚注[^ME]<br>[^ME]:   我是Wu </p><p>我是^上标^<br>我是<del>下标</del><br>== (3)列表==</p><h3 id="号-号-号都能列表"><a href="#号-号-号都能列表" class="headerlink" title="*号 +号 -号都能列表"></a>*号 +号 -号都能列表</h3><ul><li>一二三四五<ul><li>上山打老虎</li></ul></li></ul><ol><li>一二三四五</li></ol><h3 id="列表嵌套只需在子列表中的选项添加四个空格即可："><a href="#列表嵌套只需在子列表中的选项添加四个空格即可：" class="headerlink" title="列表嵌套只需在子列表中的选项添加四个空格即可："></a>列表嵌套只需在子列表中的选项添加四个空格即可：</h3><ol><li>第一个列表：<ul><li>第一个元素</li><li>第2个</li></ul></li><li>第二个：<ul><li>1</li><li>2</li></ul></li></ol><h3 id="区块配列表："><a href="#区块配列表：" class="headerlink" title="区块配列表："></a>区块配列表：</h3><ol><li>Java面向对象：<blockquote><p>封装性<br>继承性<br>多态性</p></blockquote></li></ol><h3 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h3><p><code>printf()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>public class Person {    private string name;}</code></pre><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="这是我的博客主页：WuS-bit"><a href="#这是我的博客主页：WuS-bit" class="headerlink" title="这是我的博客主页：WuS-bit"></a>这是我的博客主页：<a href="https://WuS-bit.github.io">WuS-bit</a></h4><h3 id="百度：http-baidu-com"><a href="#百度：http-baidu-com" class="headerlink" title="百度：http://baidu.com"></a>百度：<a href="http://baidu.com" target="_blank" rel="noopener">http://baidu.com</a></h3><h3 id="高级链接："><a href="#高级链接：" class="headerlink" title="高级链接："></a>高级链接：</h3><p>这个链接用1作为网址变量 [baidu][1]<br>在文档末尾给1赋值</p><p>== 表格 ==</p><table><thead><tr><th>mon</th><th align="right">tue</th><th>wed</th><th>thu</th><th>fri</th><th></th></tr></thead><tbody><tr><td>上山</td><td align="right">上山</td><td>上山</td><td>伤寒</td><td>上山</td><td></td></tr></tbody></table><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf();</span><br></pre></td></tr></table></figure><h4 id="代码块：-1"><a href="#代码块：-1" class="headerlink" title="代码块："></a>代码块：</h4><pre><code>public static void main(){    system.out.println(&quot;Hello World&quot;);}</code></pre><h2 id="段落："><a href="#段落：" class="headerlink" title="段落："></a>段落：</h2><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。<br>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p><h3 id="插入图片："><a href="#插入图片：" class="headerlink" title="插入图片："></a>插入图片：</h3><pre><code>开头一个感叹号 !接着一个方括号，里面放上图片的替代文字接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的&apos;title&apos;属性的文字。</code></pre><h4 id="这是我的微信图像："><a href="#这是我的微信图像：" class="headerlink" title="这是我的微信图像： "></a>这是我的微信图像： <img src="C:%5CUsers%5CWuShang%5CDesktop%5Cavatar.jpg" alt="微信头像"></h4><h4 id="标签指定图片大小："><a href="#标签指定图片大小：" class="headerlink" title="标签指定图片大小："></a><img>标签指定图片大小：</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="C:\Users\WuShang\Desktop\avatar.jpg" width="50%"></h4><h2 id="高级："><a href="#高级：" class="headerlink" title="高级："></a>高级：</h2><ol><li><p>横向流程图源码格式：</p><pre class="mermaid">graph LRA[方形] -->B(圆角) B --> C{条件a} C -->|a=1| D[结果1] C -->|a=2| E[结果2] F[横向流程图]</pre></li><li><p>竖向流程图源码格式：</p><pre class="mermaid">graph TDA[方形] --> B(圆角) B --> C{条件a} C --> |a=1| D[结果1] C --> |a=2| E[结果2] F[竖向流程图]</pre></li><li><p>标准流程图源码格式：</p><div id="flowchart-0" class="flow-chart"></div></li><li><p>标准流程图源码格式（横向）：</p><div id="flowchart-1" class="flow-chart"></div></li><li><p>UML时序图源码样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure></li><li><p>UML时序图源码复杂样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure></li><li><p>UML标准时序图样例：</p><pre class="mermaid">%% 时序图例子,-> 直线，-->虚线，->>实线箭头sequenceDiagram participant 张三 participant 李四 张三->王五: 王五你好吗？ loop 健康检查     王五->王五: 与疾病战斗 end Note right of 王五: 合理 食物 <br/>看医生... 李四-->>张三: 很好! 王五->李四: 你怎么样? 李四-->王五: 很好!</pre></li><li><p>甘特图样例：</p><pre class="mermaid">%% 语法示例     gantt     dateFormat  YYYY-MM-DD     title 软件开发甘特图     section 设计     需求                      :done,    des1, 2014-01-06,2014-01-08     原型                      :active,  des2, 2014-01-09, 3d     UI设计                     :         des3, after des2, 5d 未来任务                     :         des4, after des3, 5d     section 开发     学习准备理解需求                      :crit, done, 2014-01-06,24h     设计框架                             :crit, done, after des2, 2d     开发                                 :crit, active, 3d     未来任务                              :crit, 5d     耍                                   :2d     section 测试     功能测试                              :active, a1, after des3, 3d     压力测试                               :after a1  , 20h     测试报告                               : 48h</pre></li></ol><p>[1]: <a href="http://baidu.com" target="_blank" rel="noopener">http://baidu.com</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st->op->condcond(yes)->io->econd(no)->sub1(right)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st(right)->op(right)->condcond(yes)->io(bottom)->econd(no)->sub1(right)->op</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script></p>]]></content>
      
      
      <categories>
          
          <category> 学习效率 </category>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdwon入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
